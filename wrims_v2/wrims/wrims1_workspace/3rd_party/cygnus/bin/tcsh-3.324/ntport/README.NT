
tcsh can be compiled with the BSD logo as its icon. I like the icon, but I 
hope this is not some kind of copyright violation. Please let me know if it 
is. 

In any case,
There is no connection between this port of tcsh for NT
and UC Berkeley. All the bugs in the NT version are mine. 
The original parts of the code are subject to the copyright in their headers.

Send comments/bug-fixes/questions to amol@blarg.net

Microsoft Corporation has nothing to do with this code. It is not supported in
any fashion by Microsoft.

Some of the original docs are in the docs directory. The man is in html format
in docs/html/index.html

Known Bugs 
----------

If the shell hangs (usually because it's waiting for a child to die),
ctrl-break is more likely than not to wake it up.

Features
--------
* No backgrounding/job control. Use 'start' instead

  You can also use 
  <foo> & 
  or,
  nohup <foo> &

  where <foo> is some arbitrary command.

DO NOT start console apps with & unless u want them to read/write to your
console. 

(nohup foo & will say "foo Done" pretty quickly, but ignore that. There is no
way for the shell to know when the nohupped process dies. )

* Filenames in the directories under the WINNT (or WINDOWS or whatever you call
  your windows directory) are hashed only if they are .EXE.
  Names which are uppercase (For example, CALC.EXE) will also be hashed as
  lowercase,without extension. Thus, "where calc" as well as 
  "where CALC.EXE" will work.


Special Variables
-----------------
* The tcsh complete variable, when set to igncase for version >= 3.09, will
cause the shell to ignore case in completion. This is slightly different from
the behaviour of complete=enhance, which should still work as before.

* oldtitle: Stores the previous value of the console title, when you use
the title builtin below. Use it like so:
	title "$oldtitle"
to restore the previous title.

* NTlamepathfix: When set,  '/'-s in the PATH environment variable will be
  changed to '\'. 

* NTlameargfix: When set, changes '/'-s in program name for child processes
  to '\'. This will let cmd.exe, etc. work from within the shell without
  any need for aliases.

* TCSHSUBSTHB (Environment, NOT shell variable): Specifies mappings for
hashbang emulation. Should be ';' separated pairs of blank-separated
mappings.
For example,
setenv TCSHSUBSTHB "/usr/local/bin/perl c:/bin/perl.exe;"

will substitute c:/bin/perl.exe for scripts which have
#!/usr/local/bin/perl at the top.

The final ';' MUST be included. I don't check for errors too
carefully, so it's up to you to supply the exact sequence.
There is a hardcoded limit of 20 such pairs.



Special Builtins
----------------
* start: like cmd.exe's start
* title: change the shell title
* cls: Clear the entire console buffer instead of just the visible window.

Notes:
-----
* You should probably get the gnu-win32 utilities from http://www.cygnus.com
Things like 'ls' and 'cat' are useful, since we don't have a 'type' or 'dir'
anymore. 'ls' is pretty much a requirement unless you never do  'ls -l'.

* There are ports of ls, mv and cp in miscbin. ls.exe may not work on win95.

* tcsh was compiled with VC4.2 and 5.0. I don't guarantee it will compile
with any other compiler, but it should. It will *not* compile with the
gnu-win32 gcc port, so don't even tell me about it.

* Some NT utilities (including cmd.exe) feel the inexplicable urge to
parse argv[0] for command switches. Attempting to run cmd foo 
from tcsh will result in a directory named foo being created.
To work around this problem, use aliases. The following works fine for
me, and should work for you too.
alias  cmd 'c:\\nt40\\system32\\cmd.exe'
(*****Note: This is no longer necessary with 3.31, if you set NTlameargfix)

note that you have to quote the alias *and* escape the backslashes.

Startup Files:
--------------

For Windows 95: 
	<windows_directory>/.tcshrc
	For Example, C:\WINDOWS\.tcshrc

For Windows NT:
	version 3.51: <getenv(HOMEDRIVE)/getenv(HOMEPATH)/.tcshrc>
	Usually something like C:\USERS\DEFAULT\.tcshrc

	version 4.00: <getenv(USERPROFILE)/.tcshrc)
	Usually something like C:\WINNT\USERS\amold\profile\.tcshrc

These can all be overridden by setting HOME in the user's environment



* TCSHLANG: NLS support now really works. sort of.. You can
get messages in a specific language (French and German for now), by setting
the environment variable TCSHLANG to the dll for that language. tcsh comes
with:
	tcshde.dll -> German
	tcshfr.dll -> French
	tcshc.dll  => Default "C" locale
(They are in the miscbin directory, along with ports of ls, mv etc.)

You can change the dll at runtime by setting/unsetting this variable.

You can specify the DLL name, or the complete path, if it is not in your
standard search path.


Virtual key code bindings:
-------------------------
To use keys like function keys, arrows, insert, etc., the following 
form of bindkey must be used:

bindkey -b N-xxx <command>

where xxx is either:
	a) A number from 1 through 24, representing the fucntion keys.
	For example, bindkey -b N-1 run-help

	b) The strings "pgup","pgdown","end","home", "left","up","right","down",
	"ins","del"
	For example, bindkey -b N-del delete-char

Here are the bindings I use in my .tcshrc:

# NT specific bindkey extensions
	bindkey -b N-up up-history           
	bindkey -b N-down down-history      
	bindkey -b N-right forward-char    
	bindkey -b N-left backward-char
	bindkey -b N-del delete-char
	bindkey -b N-ins overwrite-mode
	bindkey -b N-1 which-command
	bindkey -b N-2 expand-history
	bindkey -b N-3 complete-word-raw
	bindkey -b N-home beginning-of-line
	bindkey -b N-end end-of-line


Literal Prompt Characters
-------------------------
tcsh uses a special syntax for embedding literal character sequences in the
prompt. For example, ANSI escapes.
Thus, if you did
set prompt='%{<ESC>[44mfoo%}\>', 
this would print the prompt in the appropriate colors.

The NT version uses the first two characters as a hex word that specify the
console attributes as in SetConsoleTextAttributes. The attributes are defined
as:

#define FOREGROUND_BLUE      0x0001 // text color contains blue.
#define FOREGROUND_GREEN     0x0002 // text color contains green.
#define FOREGROUND_RED       0x0004 // text color contains red.
#define FOREGROUND_INTENSITY 0x0008 // text color is intensified.
#define BACKGROUND_BLUE      0x0010 // background color contains blue.
#define BACKGROUND_GREEN     0x0020 // background color contains green.
#define BACKGROUND_RED       0x0040 // background color contains red.
#define BACKGROUND_INTENSITY 0x0080 // background color is intensified.

Thus,
set prompt=%{0faaa%}\>' means the prompt would contain "aaa" as white text on 
black.

The NT string 'gg' is used to reset the attributes to the original value.

So, set prompt='%{0f%}%/\>%{gg%}_' would print the path,then > in reverse video
followed by _
(note that there is a bug in the original code where a normal character HAS
to follow a literal sequence. Hence the _ above)


Yes this is ugly, but the best I can do :-). Parsing one char at a time would
be more expensive with long ANSI sequences than this scheme.

watch:
-----
Since rev 3.12, support (ha ha) for the watch variable has been added. This
will work only on a Microsoft Windows Network, i.e, where computers
participate in an NT domain. Here is how tcsh will work if your network
configuration is to its taste:

	set watch=(2 AMOLD SKYNYRD any LYNYRD)

sets a watch for AMOLD on machine SKYNYRD, and any user on machine LYNYRD. The
watch interval is 2 minutes.

Note that these are NETBIOS names, and hence the results may be flaky. There
is no good way to distinguish computer names from user names in a netbios name
table (even a good guess is very expensive), so be prepared for unexpected
results. 

There may be problems depending on what protocol is on lana number 0.
(This will usually be shown (and/or set) on NT in the properties for the
NETBIOS interface in the control panel/networks applet. Win95 is screwed up,
and if you have more than protocol, watch may not work. Don't bug me about it)

Also note that names must all be uppercase. 

The default time interval of 10 minutes is probably good, since you don't want
to generate too much network traffic.

Nice:
-----
//
// nice(niceness)
//
// where niceness is an integer in the range -6 to +7
//
// A usual foreground process starts at level 9 in the chart below
//
// the range -6 to +7 takes it from Base priority 15 down to 2. 
//
// Note that level 1 or > 15 are not allowed.
//
// Priority Level 11 (niceness -2) or greater affects system performance, 
//	so use with care.
//
// niceness defaults to  +4, which is lowest for background normal class.
// As in unix, +ve niceness indicates lower priorities.

/***************************************************************************
Niceness    Base    Priority class/thread priority

            1    Idle, normal, or high class,    THREAD_PRIORITY_IDLE

+7          2    Idle class,                     THREAD_PRIORITY_LOWEST
+6          3    Idle class,                     THREAD_PRIORITY_BELOW_NORMAL
+5          4    Idle class,                     THREAD_PRIORITY_NORMAL
+4          5    Background normal class,        THREAD_PRIORITY_LOWEST
                    Idle class,                  THREAD_PRIORITY_ABOVE_NORMAL
+3          6    Background normal class,        THREAD_PRIORITY_BELOW_NORMAL
                    Idle class,                  THREAD_PRIORITY_HIGHEST
+2          7    Foreground normal class,        THREAD_PRIORITY_LOWEST
                    Background normal class,     THREAD_PRIORITY_NORMAL
+1          8    Foreground normal class,        THREAD_PRIORITY_BELOW_NORMAL
                    Background normal class,     THREAD_PRIORITY_ABOVE_NORMAL
 0          9    Foreground normal class,        THREAD_PRIORITY_NORMAL
                    Background normal class,     THREAD_PRIORITY_HIGHEST
-1          10   Foreground normal class,        THREAD_PRIORITY_ABOVE_NORMAL
-2          11    High class,                    THREAD_PRIORITY_LOWEST
                    Foreground normal class,     THREAD_PRIORITY_HIGHEST
-3          12    High class,                    THREAD_PRIORITY_BELOW_NORMAL
-4          13    High class,                    THREAD_PRIORITY_NORMAL
-5          14    High class,                    THREAD_PRIORITY_ABOVE_NORMAL
-6          15    Idle, normal, or high class,   THREAD_PRIORITY_TIME_CRITICAL 
                  High class,                    THREAD_PRIORITY_HIGHEST


    16    Real-time class, THREAD_PRIORITY_IDLE
    22    Real-time class, THREAD_PRIORITY_LOWEST
    23    Real-time class, THREAD_PRIORITY_BELOW_NORMAL
    24    Real-time class, THREAD_PRIORITY_NORMAL
    25    Real-time class, THREAD_PRIORITY_ABOVE_NORMAL
    26    Real-time class, THREAD_PRIORITY_HIGHEST
    31    Real-time class, THREAD_PRIORITY_TIME_CRITICAL
****************************************************************************/

kill:
----

You can try to kill a process 3 ways:

kill -1 <pid> (which will send a sigint)
kill -2 <pid> (which will send a sigbreak)

kill -7 <pid> , which will call TerminateProcess() 
