THIS IS THE RELEASE NOTES FOR JAVACC VERSION 2.0.  THIS IS A CONCISE
DESCRIPTION OF ALL CHANGES BETWEEN VERSION 0.6 AND VERSION 2.0.

FOR A COMPLETE SET OF RELEASE NOTES THAT GOES INTO FULL DETAILS OF
EVERYTHING THAT HAS HAPPENED SINCE VERSION 0.5, PLEASE SEE FILE
javacc.DETAILEDNOTES.

-------------------------------------------------------------------
CHANGES BETWEEN VERSIONS 1.2 AND 2.0:
-------------------------------------------------------------------

Added CPP grammar to examples directory (contributed by Malome Khomo).

-------------------------------------------------------------------

GUI is now available to run JavaCC.  You can control all aspects of
JJTree and JavaCC (except creating and editing the grammar file)
through this GUI.

-------------------------------------------------------------------

Desktop icons now available on a variety of platforms so you can
run JavaCC by double clicking the icon.

-------------------------------------------------------------------

Bash on NT support improved.

-------------------------------------------------------------------

Uninstaller included.

-------------------------------------------------------------------

Fixed some minor bugs.

-------------------------------------------------------------------
CHANGES BETWEEN VERSIONS 1.0 AND 1.2:
-------------------------------------------------------------------

Moved JavaCC to the Metamata installer and made it available for
download from Metamata's web site.

-------------------------------------------------------------------

Added Java 1.2 grammars to the examples directory.

-------------------------------------------------------------------

Added repetition range specifications for regular expressions.
You can specify exact number of times a particular re should
occur or a {man, max} range, e.g,

    TOKEN:
    {
         < TLA: (["A"-"Z"]){3} > // Three letter acronyms!

      |

         < DOS_FILENAME: (~[".", ":", ";", "\\"]) {1,8}
                         ( "." (~[".", ":", ";", "\\"]){1,3})? >
               // An incomplete spec for the DOS file name format
    }

The translation is right now expanding out these many number of times
so use it with caution.

-------------------------------------------------------------------

You can now specify actions/state changes for EOF. It is right now
very strict in that it has to look exactly like:

   <*> TOKEN:
   {
      < EOF > { action } : NEW_STATE
   }

which means that EOF is still EOF in every state except that now
you can specify what state changes  if any or what java code
if any to execute on seeing EOF.

This should help in writing grammars for processing C/C++ #include
files, without going through hoops as in the old versions.

-------------------------------------------------------------------
CHANGES BETWEEN VERSIONS 0.8pre2 AND 1.0:
-------------------------------------------------------------------

Fixed bugs related to usage of JavaCC with Java 2.

-------------------------------------------------------------------

Many other bug fixes.

-------------------------------------------------------------------
CHANGES BETWEEN VERSIONS 0.8pre1 AND 0.8pre2:
-------------------------------------------------------------------

Mainly bug fixes.

-------------------------------------------------------------------
CHANGES BETWEEN VERSIONS 0.7.1 AND 0.8pre1:
-------------------------------------------------------------------

Changed all references to Stream classes in the JavaCC code itself and
changed them to Reader/Writer.

-------------------------------------------------------------------

Changed all the generated *CharStream classes to use Reader instead of
InputStream. The names of the generated classes still say *CharStream.
For compatibility reasons, the old constructors are still supported.
All the constructors that take InputStream create InputStreamReader
objects for reading the input data. All users parsing non-ASCII inputs
should continue to use the InputStream constrctors.

-------------------------------------------------------------------

Generate inner classes instead of top level classes where appropriate.

-------------------------------------------------------------------

-------------------------------------------------------------------
CHANGES BETWEEN VERSIONS 0.7 AND 0.7.1:
-------------------------------------------------------------------

Fixed a bug in the handling of empty PARSER_BEGIN...PARSER_END
regions.

-------------------------------------------------------------------

Fixed a bug in Java1.1noLA.jj - the improved performance Java grammar.

-------------------------------------------------------------------

Fixed a spurious definition that was being generated into the parser
when USER_TOKEN_MANAGER was set to true.

-------------------------------------------------------------------
CHANGES BETWEEN VERSIONS 0.6.1 AND 0.7:
-------------------------------------------------------------------

A newsgroup comp.compilers.tools.javacc has been formed.  The JavaCC
developers have left Sun to form a Java developer products company
called Metamata (http://www.metamata.com).  The mailing lists have
therefore been moved to metamata.com from asap.eng.sun.com.  Please
see the web pages for more information on the mailing list.

-------------------------------------------------------------------

Added an option CACHE_TOKENS with a default value of false.  You
can generate slightly faster and (it so happens) more compact
parsers if you set CACHE_TOKENS to true.

-------------------------------------------------------------------

Extended the generated CharStream classes with a method to adjust the
line and column numbers for the beginning of a token.  Look at the C++
grammar in the distribution to see an example usage.

-------------------------------------------------------------------

Fixed the JavaCC front-end so that error messages are given with line
numbers relative to the original .jjt file if the .jj file is generated
by pre-processing using jjtree.

-------------------------------------------------------------------

Removed support for old deprecated features:

. IGNORE_IN_BNF can no longer be used.  Until this version, you
  would get a deprecated warning message if you did use it.

. The extra {} in TOKEN specifications can no longer be used.  Until
  this version, you would get a deprecated warning message if your
  did use it.

-------------------------------------------------------------------

The Java 1.1 grammar was corrected to allow interfaces nested within
blocks.  The JavaCC grammar was corrected to fix a bug in its
handling of the ">>>=" operator.

-------------------------------------------------------------------

JJTree has now been bootstrapped using itself.  It has matured
significantly since Version 0.6.  Please refer the the JJTree
release notes for more information.

-------------------------------------------------------------------

The JavaCC+JJTree grammar is now being offered to our users.  You
can find it in the examples directory.

-------------------------------------------------------------------

Created an alternate Java 1.1 grammar in which lookaheads have been
modified to minimize the space requirements of the generated
parser.  See the JavaGrammars directory under the examples directory.

-------------------------------------------------------------------

Provided instructions on how you can make your own grammars space
efficient (until JavaCC is improved to do this).  See the
JavaGrammars directory under the examples directory.

-------------------------------------------------------------------

The Java grammar has been incorporated into the JavaCC grammar.
Therefore JavaCC can now understand actions and declarations in
a more intelligent manner and in some cases, perform some
processing.

-------------------------------------------------------------------

Fixed the JavaCC license agreement to allow redistributions of example
grammars (see http:/www.suntest.com/JavaCC/javaccdownload.html).

-------------------------------------------------------------------

A new option OPTIMIZE_TOKEN_MANAGER is introduced. It defaults to
true.  When this option is set, optimizations for the TokenManager, in
terms of size *and* time are performed.

This option is automatically set to false if DEBUG_TOKEN_MANAGER is
set to true.

-------------------------------------------------------------------

A String-valued option OUTPUT_DIRECTORY is implemented. This can be
used to instruct JavaCC to generate all the code files in a particular
directory.  By default, this is set to user.dir.

-------------------------------------------------------------------

Added a toString method to the Token class to return the image.

-------------------------------------------------------------------

Extended the Token class to introduce a new factory function that
takes the token kind and returns a new Token object. This is done to
facilitate creating Objects of subclasses of Token based on the kind.
Look at the generated file Token.java for more details.

-------------------------------------------------------------------

The restriction on the input size (to be < 2 gbytes) for the token
manager is gone.  Now the lexer can tokenize any size input (no
limit).

-------------------------------------------------------------------

Fixed a very old problem with giving input from System.in. Previously
for the EOF, you needed to give  or  more than once. But now it is
not required any more.

-------------------------------------------------------------------

Error recovery constructs have been added.  Please see the web
documentation for more details.

-------------------------------------------------------------------

Two new exceptions have been added - TokenMgrError for token manager
errors and ParseException for parser errors.  The exception ParseError
is gone.

-------------------------------------------------------------------

The previous scheme for customization of error messages is gone.  The
previous scheme required you to subclass the parser and/or the token
manager to customize error messages.  Now you have to modify the
method "getMessage" within the class ParseException.

-------------------------------------------------------------------

Added a method generateParseException to facilitate error recovery.

-------------------------------------------------------------------
