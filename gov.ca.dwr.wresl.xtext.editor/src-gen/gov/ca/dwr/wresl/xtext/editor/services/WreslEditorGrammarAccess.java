/*
* generated by Xtext
*/
package gov.ca.dwr.wresl.xtext.editor.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WreslEditorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WreslEvaluatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WreslEvaluator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cPatternAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPatternPatternParserRuleCall_0_0_0 = (RuleCall)cPatternAssignment_0_0.eContents().get(0);
		private final Assignment cIfincitemAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cIfincitemIfIncItemsParserRuleCall_0_1_0 = (RuleCall)cIfincitemAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInitialAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInitialInitialParserRuleCall_1_0_0 = (RuleCall)cInitialAssignment_1_0.eContents().get(0);
		private final Assignment cSequenceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSequenceSequenceParserRuleCall_1_1_0 = (RuleCall)cSequenceAssignment_1_1.eContents().get(0);
		private final Assignment cModelAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cModelModelParserRuleCall_1_2_0 = (RuleCall)cModelAssignment_1_2.eContents().get(0);
		private final RuleCall cDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//WreslEvaluator:
		//
		//	(pattern+=Pattern | ifincitem+=IfIncItems)+ | initial=Initial? sequence+=Sequence+ model+=Model+ | Declaration;
		public ParserRule getRule() { return rule; }

		//(pattern+=Pattern | ifincitem+=IfIncItems)+ | initial=Initial? sequence+=Sequence+ model+=Model+ | Declaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//(pattern+=Pattern | ifincitem+=IfIncItems)+
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//pattern+=Pattern
		public Assignment getPatternAssignment_0_0() { return cPatternAssignment_0_0; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_0_0_0() { return cPatternPatternParserRuleCall_0_0_0; }

		//ifincitem+=IfIncItems
		public Assignment getIfincitemAssignment_0_1() { return cIfincitemAssignment_0_1; }

		//IfIncItems
		public RuleCall getIfincitemIfIncItemsParserRuleCall_0_1_0() { return cIfincitemIfIncItemsParserRuleCall_0_1_0; }

		//initial=Initial? sequence+=Sequence+ model+=Model+
		public Group getGroup_1() { return cGroup_1; }

		//initial=Initial?
		public Assignment getInitialAssignment_1_0() { return cInitialAssignment_1_0; }

		//Initial
		public RuleCall getInitialInitialParserRuleCall_1_0_0() { return cInitialInitialParserRuleCall_1_0_0; }

		//sequence+=Sequence+
		public Assignment getSequenceAssignment_1_1() { return cSequenceAssignment_1_1; }

		//Sequence
		public RuleCall getSequenceSequenceParserRuleCall_1_1_0() { return cSequenceSequenceParserRuleCall_1_1_0; }

		//model+=Model+
		public Assignment getModelAssignment_1_2() { return cModelAssignment_1_2; }

		//Model
		public RuleCall getModelModelParserRuleCall_1_2_0() { return cModelModelParserRuleCall_1_2_0; }

		//Declaration
		public RuleCall getDeclarationParserRuleCall_2() { return cDeclarationParserRuleCall_2; }
	}

	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIncludeFileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIncludeModelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGoalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cObjectiveParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Pattern:
		//
		//	Variable | IncludeFile | IncludeModel | Goal | Objective;
		public ParserRule getRule() { return rule; }

		//Variable | IncludeFile | IncludeModel | Goal | Objective
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//IncludeFile
		public RuleCall getIncludeFileParserRuleCall_1() { return cIncludeFileParserRuleCall_1; }

		//IncludeModel
		public RuleCall getIncludeModelParserRuleCall_2() { return cIncludeModelParserRuleCall_2; }

		//Goal
		public RuleCall getGoalParserRuleCall_3() { return cGoalParserRuleCall_3; }

		//Objective
		public RuleCall getObjectiveParserRuleCall_4() { return cObjectiveParserRuleCall_4; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeclareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Declaration:
		//
		//	"Declare" "{" name=ID "}";
		public ParserRule getRule() { return rule; }

		//"Declare" "{" name=ID "}"
		public Group getGroup() { return cGroup; }

		//"Declare"
		public Keyword getDeclareKeyword_0() { return cDeclareKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecisionVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExternalDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variable:
		//
		//	StateVariable | DecisionVariable | ExternalDef;
		public ParserRule getRule() { return rule; }

		//StateVariable | DecisionVariable | ExternalDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//StateVariable
		public RuleCall getStateVariableParserRuleCall_0() { return cStateVariableParserRuleCall_0; }

		//DecisionVariable
		public RuleCall getDecisionVariableParserRuleCall_1() { return cDecisionVariableParserRuleCall_1; }

		//ExternalDef
		public RuleCall getExternalDefParserRuleCall_2() { return cExternalDefParserRuleCall_2; }
	}

	public class StateVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSvarDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StateVariable:
		//
		//	SvarDef | ConstDef;
		public ParserRule getRule() { return rule; }

		//SvarDef | ConstDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//SvarDef
		public RuleCall getSvarDefParserRuleCall_0() { return cSvarDefParserRuleCall_0; }

		//ConstDef
		public RuleCall getConstDefParserRuleCall_1() { return cConstDefParserRuleCall_1; }
	}

	public class DecisionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecisionVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDvarDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAliasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DecisionVariable:
		//
		//	DvarDef | Alias;
		public ParserRule getRule() { return rule; }

		//DvarDef | Alias
		public Alternatives getAlternatives() { return cAlternatives; }

		//DvarDef
		public RuleCall getDvarDefParserRuleCall_0() { return cDvarDefParserRuleCall_0; }

		//Alias
		public RuleCall getAliasParserRuleCall_1() { return cAliasParserRuleCall_1; }
	}

	public class IfIncItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfIncItems");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIfTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cElseiftermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElseiftermElseIfTermParserRuleCall_1_0 = (RuleCall)cElseiftermAssignment_1.eContents().get(0);
		private final Assignment cElsetermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElsetermElseTermParserRuleCall_2_0 = (RuleCall)cElsetermAssignment_2.eContents().get(0);
		
		//IfIncItems:
		//
		//	IfTerm elseifterm=ElseIfTerm? elseterm=ElseTerm?;
		public ParserRule getRule() { return rule; }

		//IfTerm elseifterm=ElseIfTerm? elseterm=ElseTerm?
		public Group getGroup() { return cGroup; }

		//IfTerm
		public RuleCall getIfTermParserRuleCall_0() { return cIfTermParserRuleCall_0; }

		//elseifterm=ElseIfTerm?
		public Assignment getElseiftermAssignment_1() { return cElseiftermAssignment_1; }

		//ElseIfTerm
		public RuleCall getElseiftermElseIfTermParserRuleCall_1_0() { return cElseiftermElseIfTermParserRuleCall_1_0; }

		//elseterm=ElseTerm?
		public Assignment getElsetermAssignment_2() { return cElsetermAssignment_2; }

		//ElseTerm
		public RuleCall getElsetermElseTermParserRuleCall_2_0() { return cElsetermElseTermParserRuleCall_2_0; }
	}

	public class IfTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIfTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cLogicalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogicalLogicalExpressionParserRuleCall_1_0 = (RuleCall)cLogicalAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IfTerm:
		//
		//	If logical=LogicalExpression "{" pattern+=Pattern+ "}";
		public ParserRule getRule() { return rule; }

		//If logical=LogicalExpression "{" pattern+=Pattern+ "}"
		public Group getGroup() { return cGroup; }

		//If
		public RuleCall getIfTerminalRuleCall_0() { return cIfTerminalRuleCall_0; }

		//logical=LogicalExpression
		public Assignment getLogicalAssignment_1() { return cLogicalAssignment_1; }

		//LogicalExpression
		public RuleCall getLogicalLogicalExpressionParserRuleCall_1_0() { return cLogicalLogicalExpressionParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//pattern+=Pattern+
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_3_0() { return cPatternPatternParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ElseIfTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseIfTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cElseIfTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cLogicalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogicalLogicalExpressionParserRuleCall_1_0 = (RuleCall)cLogicalAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ElseIfTerm:
		//
		//	(ElseIf logical+=LogicalExpression "{" pattern+=Pattern+ "}")+;
		public ParserRule getRule() { return rule; }

		//(ElseIf logical+=LogicalExpression "{" pattern+=Pattern+ "}")+
		public Group getGroup() { return cGroup; }

		//ElseIf
		public RuleCall getElseIfTerminalRuleCall_0() { return cElseIfTerminalRuleCall_0; }

		//logical+=LogicalExpression
		public Assignment getLogicalAssignment_1() { return cLogicalAssignment_1; }

		//LogicalExpression
		public RuleCall getLogicalLogicalExpressionParserRuleCall_1_0() { return cLogicalLogicalExpressionParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//pattern+=Pattern+
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_3_0() { return cPatternPatternParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ElseTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cElseTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElseTerm:
		//
		//	Else "{" pattern+=Pattern+ "}";
		public ParserRule getRule() { return rule; }

		//Else "{" pattern+=Pattern+ "}"
		public Group getGroup() { return cGroup; }

		//Else
		public RuleCall getElseTerminalRuleCall_0() { return cElseTerminalRuleCall_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//pattern+=Pattern+
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TimeArraySizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeArraySize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDeclarationCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TimeArraySize:
		//
		//	"(" name=[Declaration] ")";
		public ParserRule getRule() { return rule; }

		//"(" name=[Declaration] ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//name=[Declaration]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Declaration]
		public CrossReference getNameDeclarationCrossReference_1_0() { return cNameDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getNameDeclarationIDTerminalRuleCall_1_0_1() { return cNameDeclarationIDTerminalRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ObjectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Objective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cObjectiveKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOBJECTIVEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLocalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cLocalAlternatives_1_1_0 = (Alternatives)cLocalAssignment_1_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_1_1_0_0 = (Keyword)cLocalAlternatives_1_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_1_1_0_1 = (Keyword)cLocalAlternatives_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWeightsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWeightsWeightItemParserRuleCall_5_0 = (RuleCall)cWeightsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Objective:
		//
		//	("objective" | "OBJECTIVE") ("[" local?=("local" | "LOCAL") "]")? name=ID "="? "{" weights+=WeightItem+ "}";
		public ParserRule getRule() { return rule; }

		//("objective" | "OBJECTIVE") ("[" local?=("local" | "LOCAL") "]")? name=ID "="? "{" weights+=WeightItem+ "}"
		public Group getGroup() { return cGroup; }

		//"objective" | "OBJECTIVE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"objective"
		public Keyword getObjectiveKeyword_0_0() { return cObjectiveKeyword_0_0; }

		//"OBJECTIVE"
		public Keyword getOBJECTIVEKeyword_0_1() { return cOBJECTIVEKeyword_0_1; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_1_1() { return cLocalAssignment_1_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_1_1_0() { return cLocalAlternatives_1_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_1_1_0_0() { return cLocalLocalKeyword_1_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_1_1_0_1() { return cLocalLOCALKeyword_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="?
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//weights+=WeightItem+
		public Assignment getWeightsAssignment_5() { return cWeightsAssignment_5; }

		//WeightItem
		public RuleCall getWeightsWeightItemParserRuleCall_5_0() { return cWeightsWeightItemParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class WeightItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeightItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefDeclarationCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cRefDeclarationCrossReference_1_0.eContents().get(1);
		private final Assignment cTaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTaTimeArraySizeParserRuleCall_2_0 = (RuleCall)cTaAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WeightItem:
		//
		//	"[" ref=[Declaration] ta=TimeArraySize? "," expression=Expression "]" ","?;
		public ParserRule getRule() { return rule; }

		//"[" ref=[Declaration] ta=TimeArraySize? "," expression=Expression "]" ","?
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//ref=[Declaration]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_1_0() { return cRefDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_1_0_1() { return cRefDeclarationIDTerminalRuleCall_1_0_1; }

		//ta=TimeArraySize?
		public Assignment getTaAssignment_2() { return cTaAssignment_2; }

		//TimeArraySize
		public RuleCall getTaTimeArraySizeParserRuleCall_2_0() { return cTaTimeArraySizeParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//","?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
	}

	public class ExternalDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDEFINEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLocalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cLocalAlternatives_1_1_0 = (Alternatives)cLocalAssignment_1_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_1_1_0_0 = (Keyword)cLocalAlternatives_1_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_1_1_0_1 = (Keyword)cLocalAlternatives_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefDeclarationCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cRefDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionExternalParserRuleCall_4_0 = (RuleCall)cDefinitionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExternalDef:
		//
		//	("define" | "DEFINE") ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=External "}";
		public ParserRule getRule() { return rule; }

		//("define" | "DEFINE") ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=External "}"
		public Group getGroup() { return cGroup; }

		//"define" | "DEFINE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"define"
		public Keyword getDefineKeyword_0_0() { return cDefineKeyword_0_0; }

		//"DEFINE"
		public Keyword getDEFINEKeyword_0_1() { return cDEFINEKeyword_0_1; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_1_1() { return cLocalAssignment_1_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_1_1_0() { return cLocalAlternatives_1_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_1_1_0_0() { return cLocalLocalKeyword_1_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_1_1_0_1() { return cLocalLOCALKeyword_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//ref=[Declaration]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_2_0() { return cRefDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_2_0_1() { return cRefDeclarationIDTerminalRuleCall_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//definition=External
		public Assignment getDefinitionAssignment_4() { return cDefinitionAssignment_4; }

		//External
		public RuleCall getDefinitionExternalParserRuleCall_4_0() { return cDefinitionExternalParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SvarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SvarDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cDefineKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cDEFINEKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cTaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTaTimeArraySizeParserRuleCall_0_1_0 = (RuleCall)cTaAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cLocalAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final Alternatives cLocalAlternatives_0_2_1_0 = (Alternatives)cLocalAssignment_0_2_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_0_2_1_0_0 = (Keyword)cLocalAlternatives_0_2_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_0_2_1_0_1 = (Keyword)cLocalAlternatives_0_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cRefAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cRefDeclarationCrossReference_0_3_0 = (CrossReference)cRefAssignment_0_3.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_0_3_0_1 = (RuleCall)cRefDeclarationCrossReference_0_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cDefinitionAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cDefinitionSVarParserRuleCall_0_5_0 = (RuleCall)cDefinitionAssignment_0_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cSvarKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSVARKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSvarKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cTaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTaTimeArraySizeParserRuleCall_1_1_0 = (RuleCall)cTaAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cLocalAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Alternatives cLocalAlternatives_1_2_1_0 = (Alternatives)cLocalAssignment_1_2_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_1_2_1_0_0 = (Keyword)cLocalAlternatives_1_2_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_1_2_1_0_1 = (Keyword)cLocalAlternatives_1_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cRefAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cRefDeclarationCrossReference_1_3_0 = (CrossReference)cRefAssignment_1_3.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_1_3_0_1 = (RuleCall)cRefDeclarationCrossReference_1_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cDefinitionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cDefinitionSVarParserRuleCall_1_5_0 = (RuleCall)cDefinitionAssignment_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//SvarDef:
		//
		//	("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=SVar
		//
		//	"}" | ("svar" | "SVAR" | "Svar") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{"
		//
		//	definition=SVar "}";
		public ParserRule getRule() { return rule; }

		//("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=SVar "}"
		//
		//| ("svar" | "SVAR" | "Svar") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{"
		//
		//definition=SVar "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=SVar "}"
		public Group getGroup_0() { return cGroup_0; }

		//"define" | "DEFINE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"define"
		public Keyword getDefineKeyword_0_0_0() { return cDefineKeyword_0_0_0; }

		//"DEFINE"
		public Keyword getDEFINEKeyword_0_0_1() { return cDEFINEKeyword_0_0_1; }

		//ta=TimeArraySize?
		public Assignment getTaAssignment_0_1() { return cTaAssignment_0_1; }

		//TimeArraySize
		public RuleCall getTaTimeArraySizeParserRuleCall_0_1_0() { return cTaTimeArraySizeParserRuleCall_0_1_0; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_2_0() { return cLeftSquareBracketKeyword_0_2_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_0_2_1() { return cLocalAssignment_0_2_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_0_2_1_0() { return cLocalAlternatives_0_2_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_0_2_1_0_0() { return cLocalLocalKeyword_0_2_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_0_2_1_0_1() { return cLocalLOCALKeyword_0_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_2_2() { return cRightSquareBracketKeyword_0_2_2; }

		//ref=[Declaration]
		public Assignment getRefAssignment_0_3() { return cRefAssignment_0_3; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_0_3_0() { return cRefDeclarationCrossReference_0_3_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_0_3_0_1() { return cRefDeclarationIDTerminalRuleCall_0_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_4() { return cLeftCurlyBracketKeyword_0_4; }

		//definition=SVar
		public Assignment getDefinitionAssignment_0_5() { return cDefinitionAssignment_0_5; }

		//SVar
		public RuleCall getDefinitionSVarParserRuleCall_0_5_0() { return cDefinitionSVarParserRuleCall_0_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }

		//("svar" | "SVAR" | "Svar") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=SVar
		//
		//"}"
		public Group getGroup_1() { return cGroup_1; }

		//"svar" | "SVAR" | "Svar"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"svar"
		public Keyword getSvarKeyword_1_0_0() { return cSvarKeyword_1_0_0; }

		//"SVAR"
		public Keyword getSVARKeyword_1_0_1() { return cSVARKeyword_1_0_1; }

		//"Svar"
		public Keyword getSvarKeyword_1_0_2() { return cSvarKeyword_1_0_2; }

		//ta=TimeArraySize?
		public Assignment getTaAssignment_1_1() { return cTaAssignment_1_1; }

		//TimeArraySize
		public RuleCall getTaTimeArraySizeParserRuleCall_1_1_0() { return cTaTimeArraySizeParserRuleCall_1_1_0; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_1_2_1() { return cLocalAssignment_1_2_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_1_2_1_0() { return cLocalAlternatives_1_2_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_1_2_1_0_0() { return cLocalLocalKeyword_1_2_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_1_2_1_0_1() { return cLocalLOCALKeyword_1_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }

		//ref=[Declaration]
		public Assignment getRefAssignment_1_3() { return cRefAssignment_1_3; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_1_3_0() { return cRefDeclarationCrossReference_1_3_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_1_3_0_1() { return cRefDeclarationIDTerminalRuleCall_1_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }

		//definition=SVar
		public Assignment getDefinitionAssignment_1_5() { return cDefinitionAssignment_1_5; }

		//SVar
		public RuleCall getDefinitionSVarParserRuleCall_1_5_0() { return cDefinitionSVarParserRuleCall_1_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}

	public class DvarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DvarDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cDefineKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cDEFINEKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cTaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTaTimeArraySizeParserRuleCall_0_1_0 = (RuleCall)cTaAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cLocalAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final Alternatives cLocalAlternatives_0_2_1_0 = (Alternatives)cLocalAssignment_0_2_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_0_2_1_0_0 = (Keyword)cLocalAlternatives_0_2_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_0_2_1_0_1 = (Keyword)cLocalAlternatives_0_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cRefAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cRefDeclarationCrossReference_0_3_0 = (CrossReference)cRefAssignment_0_3.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_0_3_0_1 = (RuleCall)cRefDeclarationCrossReference_0_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cDefinitionAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final Alternatives cDefinitionAlternatives_0_5_0 = (Alternatives)cDefinitionAssignment_0_5.eContents().get(0);
		private final RuleCall cDefinitionDVarParserRuleCall_0_5_0_0 = (RuleCall)cDefinitionAlternatives_0_5_0.eContents().get(0);
		private final RuleCall cDefinitionDVarIntegerParserRuleCall_0_5_0_1 = (RuleCall)cDefinitionAlternatives_0_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cDvarKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cDVARKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cDvarKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cTaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTaTimeArraySizeParserRuleCall_1_1_0 = (RuleCall)cTaAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cLocalAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Alternatives cLocalAlternatives_1_2_1_0 = (Alternatives)cLocalAssignment_1_2_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_1_2_1_0_0 = (Keyword)cLocalAlternatives_1_2_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_1_2_1_0_1 = (Keyword)cLocalAlternatives_1_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cRefAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cRefDeclarationCrossReference_1_3_0 = (CrossReference)cRefAssignment_1_3.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_1_3_0_1 = (RuleCall)cRefDeclarationCrossReference_1_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cDefinitionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final Alternatives cDefinitionAlternatives_1_5_0 = (Alternatives)cDefinitionAssignment_1_5.eContents().get(0);
		private final RuleCall cDefinitionDVarParserRuleCall_1_5_0_0 = (RuleCall)cDefinitionAlternatives_1_5_0.eContents().get(0);
		private final RuleCall cDefinitionDVarIntegerParserRuleCall_1_5_0_1 = (RuleCall)cDefinitionAlternatives_1_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//DvarDef:
		//
		//	("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=(DVar
		//
		//	| DVarInteger) "}" | ("dvar" | "DVAR" | "Dvar") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")?
		//
		//	ref=[Declaration] "{" definition=(DVar | DVarInteger) "}";
		public ParserRule getRule() { return rule; }

		//("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=(DVar |
		//
		//DVarInteger) "}" | ("dvar" | "DVAR" | "Dvar") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")?
		//
		//ref=[Declaration] "{" definition=(DVar | DVarInteger) "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=(DVar |
		//
		//DVarInteger) "}"
		public Group getGroup_0() { return cGroup_0; }

		//"define" | "DEFINE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"define"
		public Keyword getDefineKeyword_0_0_0() { return cDefineKeyword_0_0_0; }

		//"DEFINE"
		public Keyword getDEFINEKeyword_0_0_1() { return cDEFINEKeyword_0_0_1; }

		//ta=TimeArraySize?
		public Assignment getTaAssignment_0_1() { return cTaAssignment_0_1; }

		//TimeArraySize
		public RuleCall getTaTimeArraySizeParserRuleCall_0_1_0() { return cTaTimeArraySizeParserRuleCall_0_1_0; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_2_0() { return cLeftSquareBracketKeyword_0_2_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_0_2_1() { return cLocalAssignment_0_2_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_0_2_1_0() { return cLocalAlternatives_0_2_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_0_2_1_0_0() { return cLocalLocalKeyword_0_2_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_0_2_1_0_1() { return cLocalLOCALKeyword_0_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_2_2() { return cRightSquareBracketKeyword_0_2_2; }

		//ref=[Declaration]
		public Assignment getRefAssignment_0_3() { return cRefAssignment_0_3; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_0_3_0() { return cRefDeclarationCrossReference_0_3_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_0_3_0_1() { return cRefDeclarationIDTerminalRuleCall_0_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_4() { return cLeftCurlyBracketKeyword_0_4; }

		//definition=(DVar | DVarInteger)
		public Assignment getDefinitionAssignment_0_5() { return cDefinitionAssignment_0_5; }

		//DVar | DVarInteger
		public Alternatives getDefinitionAlternatives_0_5_0() { return cDefinitionAlternatives_0_5_0; }

		//DVar
		public RuleCall getDefinitionDVarParserRuleCall_0_5_0_0() { return cDefinitionDVarParserRuleCall_0_5_0_0; }

		//DVarInteger
		public RuleCall getDefinitionDVarIntegerParserRuleCall_0_5_0_1() { return cDefinitionDVarIntegerParserRuleCall_0_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }

		//("dvar" | "DVAR" | "Dvar") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{"
		//
		//definition=(DVar | DVarInteger) "}"
		public Group getGroup_1() { return cGroup_1; }

		//"dvar" | "DVAR" | "Dvar"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"dvar"
		public Keyword getDvarKeyword_1_0_0() { return cDvarKeyword_1_0_0; }

		//"DVAR"
		public Keyword getDVARKeyword_1_0_1() { return cDVARKeyword_1_0_1; }

		//"Dvar"
		public Keyword getDvarKeyword_1_0_2() { return cDvarKeyword_1_0_2; }

		//ta=TimeArraySize?
		public Assignment getTaAssignment_1_1() { return cTaAssignment_1_1; }

		//TimeArraySize
		public RuleCall getTaTimeArraySizeParserRuleCall_1_1_0() { return cTaTimeArraySizeParserRuleCall_1_1_0; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_1_2_1() { return cLocalAssignment_1_2_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_1_2_1_0() { return cLocalAlternatives_1_2_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_1_2_1_0_0() { return cLocalLocalKeyword_1_2_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_1_2_1_0_1() { return cLocalLOCALKeyword_1_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }

		//ref=[Declaration]
		public Assignment getRefAssignment_1_3() { return cRefAssignment_1_3; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_1_3_0() { return cRefDeclarationCrossReference_1_3_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_1_3_0_1() { return cRefDeclarationIDTerminalRuleCall_1_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }

		//definition=(DVar | DVarInteger)
		public Assignment getDefinitionAssignment_1_5() { return cDefinitionAssignment_1_5; }

		//DVar | DVarInteger
		public Alternatives getDefinitionAlternatives_1_5_0() { return cDefinitionAlternatives_1_5_0; }

		//DVar
		public RuleCall getDefinitionDVarParserRuleCall_1_5_0_0() { return cDefinitionDVarParserRuleCall_1_5_0_0; }

		//DVarInteger
		public RuleCall getDefinitionDVarIntegerParserRuleCall_1_5_0_1() { return cDefinitionDVarIntegerParserRuleCall_1_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}

	public class ConstDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCONSTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cConstKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLocalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cLocalAlternatives_1_1_0 = (Alternatives)cLocalAssignment_1_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_1_1_0_0 = (Keyword)cLocalAlternatives_1_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_1_1_0_1 = (Keyword)cLocalAlternatives_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefDeclarationCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cRefDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionNumberParserRuleCall_4_0 = (RuleCall)cDefinitionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstDef:
		//
		//	("const" | "CONST" | "Const") ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=Number "}";
		public ParserRule getRule() { return rule; }

		//("const" | "CONST" | "Const") ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=Number "}"
		public Group getGroup() { return cGroup; }

		//"const" | "CONST" | "Const"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"const"
		public Keyword getConstKeyword_0_0() { return cConstKeyword_0_0; }

		//"CONST"
		public Keyword getCONSTKeyword_0_1() { return cCONSTKeyword_0_1; }

		//"Const"
		public Keyword getConstKeyword_0_2() { return cConstKeyword_0_2; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_1_1() { return cLocalAssignment_1_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_1_1_0() { return cLocalAlternatives_1_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_1_1_0_0() { return cLocalLocalKeyword_1_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_1_1_0_1() { return cLocalLOCALKeyword_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//ref=[Declaration]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_2_0() { return cRefDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_2_0_1() { return cRefDeclarationIDTerminalRuleCall_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//definition=Number
		public Assignment getDefinitionAssignment_4() { return cDefinitionAssignment_4; }

		//Number
		public RuleCall getDefinitionNumberParserRuleCall_4_0() { return cDefinitionNumberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDEFINEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTaTimeArraySizeParserRuleCall_1_0 = (RuleCall)cTaAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLocalAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cLocalAlternatives_2_1_0 = (Alternatives)cLocalAssignment_2_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_2_1_0_0 = (Keyword)cLocalAlternatives_2_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_2_1_0_1 = (Keyword)cLocalAlternatives_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefDeclarationCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cRefDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cAliasKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cALIASKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_7_0 = (Alternatives)cGroup_7.eContents().get(0);
		private final Keyword cKindKeyword_7_0_0 = (Keyword)cAlternatives_7_0.eContents().get(0);
		private final Keyword cKINDKeyword_7_0_1 = (Keyword)cAlternatives_7_0.eContents().get(1);
		private final Assignment cKindAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cKindSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cKindAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_8_0 = (Alternatives)cGroup_8.eContents().get(0);
		private final Keyword cUnitsKeyword_8_0_0 = (Keyword)cAlternatives_8_0.eContents().get(0);
		private final Keyword cUNITSKeyword_8_0_1 = (Keyword)cAlternatives_8_0.eContents().get(1);
		private final Assignment cUnitsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cUnitsSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cUnitsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////name=[SVar|ID] to be changed to reference after scoping is resolved across files
		// Alias:
		//
		//	("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" ("alias" |
		//
		//	"ALIAS") expression=Expression (("kind" | "KIND") kind=STRING)? (("units" | "UNITS") units=STRING)? "}";
		public ParserRule getRule() { return rule; }

		//("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" ("alias" | "ALIAS")
		//
		//expression=Expression (("kind" | "KIND") kind=STRING)? (("units" | "UNITS") units=STRING)? "}"
		public Group getGroup() { return cGroup; }

		//"define" | "DEFINE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"define"
		public Keyword getDefineKeyword_0_0() { return cDefineKeyword_0_0; }

		//"DEFINE"
		public Keyword getDEFINEKeyword_0_1() { return cDEFINEKeyword_0_1; }

		//ta=TimeArraySize?
		public Assignment getTaAssignment_1() { return cTaAssignment_1; }

		//TimeArraySize
		public RuleCall getTaTimeArraySizeParserRuleCall_1_0() { return cTaTimeArraySizeParserRuleCall_1_0; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_2_1() { return cLocalAssignment_2_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_2_1_0() { return cLocalAlternatives_2_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_2_1_0_0() { return cLocalLocalKeyword_2_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_2_1_0_1() { return cLocalLOCALKeyword_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//ref=[Declaration]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_3_0() { return cRefDeclarationCrossReference_3_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_3_0_1() { return cRefDeclarationIDTerminalRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"alias" | "ALIAS"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"alias"
		public Keyword getAliasKeyword_5_0() { return cAliasKeyword_5_0; }

		//"ALIAS"
		public Keyword getALIASKeyword_5_1() { return cALIASKeyword_5_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_0() { return cExpressionExpressionParserRuleCall_6_0; }

		//(("kind" | "KIND") kind=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"kind" | "KIND"
		public Alternatives getAlternatives_7_0() { return cAlternatives_7_0; }

		//"kind"
		public Keyword getKindKeyword_7_0_0() { return cKindKeyword_7_0_0; }

		//"KIND"
		public Keyword getKINDKeyword_7_0_1() { return cKINDKeyword_7_0_1; }

		//kind=STRING
		public Assignment getKindAssignment_7_1() { return cKindAssignment_7_1; }

		//STRING
		public RuleCall getKindSTRINGTerminalRuleCall_7_1_0() { return cKindSTRINGTerminalRuleCall_7_1_0; }

		//(("units" | "UNITS") units=STRING)?
		public Group getGroup_8() { return cGroup_8; }

		//"units" | "UNITS"
		public Alternatives getAlternatives_8_0() { return cAlternatives_8_0; }

		//"units"
		public Keyword getUnitsKeyword_8_0_0() { return cUnitsKeyword_8_0_0; }

		//"UNITS"
		public Keyword getUNITSKeyword_8_0_1() { return cUNITSKeyword_8_0_1; }

		//units=STRING
		public Assignment getUnitsAssignment_8_1() { return cUnitsAssignment_8_1; }

		//STRING
		public RuleCall getUnitsSTRINGTerminalRuleCall_8_1_0() { return cUnitsSTRINGTerminalRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "External");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cExternalKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEXTERNALKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cDllKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cDLLKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExternalAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cF90Keyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cF90Keyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		
		//External:
		//
		//	("external" | "EXTERNAL") (name=ID (".dll" | ".DLL") | {External} ("f90" | "F90"));
		public ParserRule getRule() { return rule; }

		//("external" | "EXTERNAL") (name=ID (".dll" | ".DLL") | {External} ("f90" | "F90"))
		public Group getGroup() { return cGroup; }

		//"external" | "EXTERNAL"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"external"
		public Keyword getExternalKeyword_0_0() { return cExternalKeyword_0_0; }

		//"EXTERNAL"
		public Keyword getEXTERNALKeyword_0_1() { return cEXTERNALKeyword_0_1; }

		//name=ID (".dll" | ".DLL") | {External} ("f90" | "F90")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//name=ID (".dll" | ".DLL")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0_0() { return cNameIDTerminalRuleCall_1_0_0_0; }

		//".dll" | ".DLL"
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//".dll"
		public Keyword getDllKeyword_1_0_1_0() { return cDllKeyword_1_0_1_0; }

		//".DLL"
		public Keyword getDLLKeyword_1_0_1_1() { return cDLLKeyword_1_0_1_1; }

		//{External} ("f90" | "F90")
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{External}
		public Action getExternalAction_1_1_0() { return cExternalAction_1_1_0; }

		//"f90" | "F90"
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//"f90"
		public Keyword getF90Keyword_1_1_1_0() { return cF90Keyword_1_1_1_0; }

		//"F90"
		public Keyword getF90Keyword_1_1_1_1() { return cF90Keyword_1_1_1_1; }
	}

	public class DVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDVarStdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDVarNonStdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DVar:
		//
		//	DVarStd | DVarNonStd;
		public ParserRule getRule() { return rule; }

		//DVarStd | DVarNonStd
		public Alternatives getAlternatives() { return cAlternatives; }

		//DVarStd
		public RuleCall getDVarStdParserRuleCall_0() { return cDVarStdParserRuleCall_0; }

		//DVarNonStd
		public RuleCall getDVarNonStdParserRuleCall_1() { return cDVarNonStdParserRuleCall_1; }
	}

	public class DVarNonStdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DVarNonStd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerUpperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerUpperLowerAndOrUpperParserRuleCall_0_0 = (RuleCall)cLowerUpperAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cKindKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cKINDKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cKindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindSTRINGTerminalRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cUnitsKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cUNITSKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cUnitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitsSTRINGTerminalRuleCall_4_0 = (RuleCall)cUnitsAssignment_4.eContents().get(0);
		
		//DVarNonStd:
		//
		//	lowerUpper=LowerAndOrUpper ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING;
		public ParserRule getRule() { return rule; }

		//lowerUpper=LowerAndOrUpper ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING
		public Group getGroup() { return cGroup; }

		//lowerUpper=LowerAndOrUpper
		public Assignment getLowerUpperAssignment_0() { return cLowerUpperAssignment_0; }

		//LowerAndOrUpper
		public RuleCall getLowerUpperLowerAndOrUpperParserRuleCall_0_0() { return cLowerUpperLowerAndOrUpperParserRuleCall_0_0; }

		//"kind" | "KIND"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"kind"
		public Keyword getKindKeyword_1_0() { return cKindKeyword_1_0; }

		//"KIND"
		public Keyword getKINDKeyword_1_1() { return cKINDKeyword_1_1; }

		//kind=STRING
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }

		//STRING
		public RuleCall getKindSTRINGTerminalRuleCall_2_0() { return cKindSTRINGTerminalRuleCall_2_0; }

		//"units" | "UNITS"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"units"
		public Keyword getUnitsKeyword_3_0() { return cUnitsKeyword_3_0; }

		//"UNITS"
		public Keyword getUNITSKeyword_3_1() { return cUNITSKeyword_3_1; }

		//units=STRING
		public Assignment getUnitsAssignment_4() { return cUnitsAssignment_4; }

		//STRING
		public RuleCall getUnitsSTRINGTerminalRuleCall_4_0() { return cUnitsSTRINGTerminalRuleCall_4_0; }
	}

	public class DVarStdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DVarStd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStdKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSTDKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cKindKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cKINDKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cKindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindSTRINGTerminalRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cUnitsKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cUNITSKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cUnitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitsSTRINGTerminalRuleCall_4_0 = (RuleCall)cUnitsAssignment_4.eContents().get(0);
		
		//DVarStd:
		//
		//	("std" | "STD") ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING;
		public ParserRule getRule() { return rule; }

		//("std" | "STD") ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING
		public Group getGroup() { return cGroup; }

		//"std" | "STD"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"std"
		public Keyword getStdKeyword_0_0() { return cStdKeyword_0_0; }

		//"STD"
		public Keyword getSTDKeyword_0_1() { return cSTDKeyword_0_1; }

		//"kind" | "KIND"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"kind"
		public Keyword getKindKeyword_1_0() { return cKindKeyword_1_0; }

		//"KIND"
		public Keyword getKINDKeyword_1_1() { return cKINDKeyword_1_1; }

		//kind=STRING
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }

		//STRING
		public RuleCall getKindSTRINGTerminalRuleCall_2_0() { return cKindSTRINGTerminalRuleCall_2_0; }

		//"units" | "UNITS"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"units"
		public Keyword getUnitsKeyword_3_0() { return cUnitsKeyword_3_0; }

		//"UNITS"
		public Keyword getUNITSKeyword_3_1() { return cUNITSKeyword_3_1; }

		//units=STRING
		public Assignment getUnitsAssignment_4() { return cUnitsAssignment_4; }

		//STRING
		public RuleCall getUnitsSTRINGTerminalRuleCall_4_0() { return cUnitsSTRINGTerminalRuleCall_4_0; }
	}

	public class DVarIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DVarInteger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDVarIntegerStdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDVarIntegerNonStdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DVarInteger:
		//
		//	DVarIntegerStd | DVarIntegerNonStd;
		public ParserRule getRule() { return rule; }

		//DVarIntegerStd | DVarIntegerNonStd
		public Alternatives getAlternatives() { return cAlternatives; }

		//DVarIntegerStd
		public RuleCall getDVarIntegerStdParserRuleCall_0() { return cDVarIntegerStdParserRuleCall_0; }

		//DVarIntegerNonStd
		public RuleCall getDVarIntegerNonStdParserRuleCall_1() { return cDVarIntegerNonStdParserRuleCall_1; }
	}

	public class DVarIntegerStdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DVarIntegerStd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cINTEGERKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cStdKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSTDKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cKindKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cKINDKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cKindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKindSTRINGTerminalRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cUnitsKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cUNITSKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cUnitsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnitsSTRINGTerminalRuleCall_5_0 = (RuleCall)cUnitsAssignment_5.eContents().get(0);
		
		//DVarIntegerStd:
		//
		//	("integer" | "INTEGER") ("std" | "STD") ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING;
		public ParserRule getRule() { return rule; }

		//("integer" | "INTEGER") ("std" | "STD") ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING
		public Group getGroup() { return cGroup; }

		//"integer" | "INTEGER"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"integer"
		public Keyword getIntegerKeyword_0_0() { return cIntegerKeyword_0_0; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_0_1() { return cINTEGERKeyword_0_1; }

		//"std" | "STD"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"std"
		public Keyword getStdKeyword_1_0() { return cStdKeyword_1_0; }

		//"STD"
		public Keyword getSTDKeyword_1_1() { return cSTDKeyword_1_1; }

		//"kind" | "KIND"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"kind"
		public Keyword getKindKeyword_2_0() { return cKindKeyword_2_0; }

		//"KIND"
		public Keyword getKINDKeyword_2_1() { return cKINDKeyword_2_1; }

		//kind=STRING
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }

		//STRING
		public RuleCall getKindSTRINGTerminalRuleCall_3_0() { return cKindSTRINGTerminalRuleCall_3_0; }

		//"units" | "UNITS"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"units"
		public Keyword getUnitsKeyword_4_0() { return cUnitsKeyword_4_0; }

		//"UNITS"
		public Keyword getUNITSKeyword_4_1() { return cUNITSKeyword_4_1; }

		//units=STRING
		public Assignment getUnitsAssignment_5() { return cUnitsAssignment_5; }

		//STRING
		public RuleCall getUnitsSTRINGTerminalRuleCall_5_0() { return cUnitsSTRINGTerminalRuleCall_5_0; }
	}

	public class DVarIntegerNonStdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DVarIntegerNonStd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cINTEGERKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cLowerAndOrUpperParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cKindKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cKINDKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cKindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKindSTRINGTerminalRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cUnitsKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cUNITSKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cUnitsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnitsSTRINGTerminalRuleCall_5_0 = (RuleCall)cUnitsAssignment_5.eContents().get(0);
		
		//DVarIntegerNonStd:
		//
		//	("integer" | "INTEGER") LowerAndOrUpper ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING;
		public ParserRule getRule() { return rule; }

		//("integer" | "INTEGER") LowerAndOrUpper ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING
		public Group getGroup() { return cGroup; }

		//"integer" | "INTEGER"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"integer"
		public Keyword getIntegerKeyword_0_0() { return cIntegerKeyword_0_0; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_0_1() { return cINTEGERKeyword_0_1; }

		//LowerAndOrUpper
		public RuleCall getLowerAndOrUpperParserRuleCall_1() { return cLowerAndOrUpperParserRuleCall_1; }

		//"kind" | "KIND"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"kind"
		public Keyword getKindKeyword_2_0() { return cKindKeyword_2_0; }

		//"KIND"
		public Keyword getKINDKeyword_2_1() { return cKINDKeyword_2_1; }

		//kind=STRING
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }

		//STRING
		public RuleCall getKindSTRINGTerminalRuleCall_3_0() { return cKindSTRINGTerminalRuleCall_3_0; }

		//"units" | "UNITS"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"units"
		public Keyword getUnitsKeyword_4_0() { return cUnitsKeyword_4_0; }

		//"UNITS"
		public Keyword getUNITSKeyword_4_1() { return cUNITSKeyword_4_1; }

		//units=STRING
		public Assignment getUnitsAssignment_5() { return cUnitsAssignment_5; }

		//STRING
		public RuleCall getUnitsSTRINGTerminalRuleCall_5_0() { return cUnitsSTRINGTerminalRuleCall_5_0; }
	}

	public class SVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSVarDSSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSVarExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSVarSumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSVarTableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSVarCaseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SVar:
		//
		//	SVarDSS | SVarExpression | SVarSum | SVarTable | SVarCase;
		public ParserRule getRule() { return rule; }

		//SVarDSS | SVarExpression | SVarSum | SVarTable | SVarCase
		public Alternatives getAlternatives() { return cAlternatives; }

		//SVarDSS
		public RuleCall getSVarDSSParserRuleCall_0() { return cSVarDSSParserRuleCall_0; }

		//SVarExpression
		public RuleCall getSVarExpressionParserRuleCall_1() { return cSVarExpressionParserRuleCall_1; }

		//SVarSum
		public RuleCall getSVarSumParserRuleCall_2() { return cSVarSumParserRuleCall_2; }

		//SVarTable
		public RuleCall getSVarTableParserRuleCall_3() { return cSVarTableParserRuleCall_3; }

		//SVarCase
		public RuleCall getSVarCaseParserRuleCall_4() { return cSVarCaseParserRuleCall_4; }
	}

	public class SVarDSSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SVarDSS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTimeseriesKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTIMESERIESKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cBPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBPartSTRINGTerminalRuleCall_1_0 = (RuleCall)cBPartAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cKindKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cKINDKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cKindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKindSTRINGTerminalRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cUnitsKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cUNITSKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cUnitsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnitsSTRINGTerminalRuleCall_5_0 = (RuleCall)cUnitsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Keyword cConvertKeyword_6_0_0 = (Keyword)cAlternatives_6_0.eContents().get(0);
		private final Keyword cCONVERTKeyword_6_0_1 = (Keyword)cAlternatives_6_0.eContents().get(1);
		private final Assignment cConvertAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConvertSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cConvertAssignment_6_1.eContents().get(0);
		
		//SVarDSS:
		//
		//	("timeseries" | "TIMESERIES") bPart=STRING? ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING
		//
		//	(("convert" | "CONVERT") convert=STRING)?;
		public ParserRule getRule() { return rule; }

		//("timeseries" | "TIMESERIES") bPart=STRING? ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING (("convert" |
		//
		//"CONVERT") convert=STRING)?
		public Group getGroup() { return cGroup; }

		//"timeseries" | "TIMESERIES"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"timeseries"
		public Keyword getTimeseriesKeyword_0_0() { return cTimeseriesKeyword_0_0; }

		//"TIMESERIES"
		public Keyword getTIMESERIESKeyword_0_1() { return cTIMESERIESKeyword_0_1; }

		//bPart=STRING?
		public Assignment getBPartAssignment_1() { return cBPartAssignment_1; }

		//STRING
		public RuleCall getBPartSTRINGTerminalRuleCall_1_0() { return cBPartSTRINGTerminalRuleCall_1_0; }

		//"kind" | "KIND"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"kind"
		public Keyword getKindKeyword_2_0() { return cKindKeyword_2_0; }

		//"KIND"
		public Keyword getKINDKeyword_2_1() { return cKINDKeyword_2_1; }

		//kind=STRING
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }

		//STRING
		public RuleCall getKindSTRINGTerminalRuleCall_3_0() { return cKindSTRINGTerminalRuleCall_3_0; }

		//"units" | "UNITS"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"units"
		public Keyword getUnitsKeyword_4_0() { return cUnitsKeyword_4_0; }

		//"UNITS"
		public Keyword getUNITSKeyword_4_1() { return cUNITSKeyword_4_1; }

		//units=STRING
		public Assignment getUnitsAssignment_5() { return cUnitsAssignment_5; }

		//STRING
		public RuleCall getUnitsSTRINGTerminalRuleCall_5_0() { return cUnitsSTRINGTerminalRuleCall_5_0; }

		//(("convert" | "CONVERT") convert=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//"convert" | "CONVERT"
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }

		//"convert"
		public Keyword getConvertKeyword_6_0_0() { return cConvertKeyword_6_0_0; }

		//"CONVERT"
		public Keyword getCONVERTKeyword_6_0_1() { return cCONVERTKeyword_6_0_1; }

		//convert=STRING
		public Assignment getConvertAssignment_6_1() { return cConvertAssignment_6_1; }

		//STRING
		public RuleCall getConvertSTRINGTerminalRuleCall_6_1_0() { return cConvertSTRINGTerminalRuleCall_6_1_0; }
	}

	public class SVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SVarExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cVALUEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//SVarExpression:
		//
		//	("value" | "VALUE") expression=Expression;
		public ParserRule getRule() { return rule; }

		//("value" | "VALUE") expression=Expression
		public Group getGroup() { return cGroup; }

		//"value" | "VALUE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"value"
		public Keyword getValueKeyword_0_0() { return cValueKeyword_0_0; }

		//"VALUE"
		public Keyword getVALUEKeyword_0_1() { return cVALUEKeyword_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class SVarSumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SVarSum");
		private final Assignment cSumContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSumContentSumContentParserRuleCall_0 = (RuleCall)cSumContentAssignment.eContents().get(0);
		
		//SVarSum:
		//
		//	sumContent=SumContent;
		public ParserRule getRule() { return rule; }

		//sumContent=SumContent
		public Assignment getSumContentAssignment() { return cSumContentAssignment; }

		//SumContent
		public RuleCall getSumContentSumContentParserRuleCall_0() { return cSumContentSumContentParserRuleCall_0; }
	}

	public class SVarTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SVarTable");
		private final Assignment cTableContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTableContentTableContentParserRuleCall_0 = (RuleCall)cTableContentAssignment.eContents().get(0);
		
		//SVarTable:
		//
		//	tableContent=TableContent;
		public ParserRule getRule() { return rule; }

		//tableContent=TableContent
		public Assignment getTableContentAssignment() { return cTableContentAssignment; }

		//TableContent
		public RuleCall getTableContentTableContentParserRuleCall_0() { return cTableContentTableContentParserRuleCall_0; }
	}

	public class SVarCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SVarCase");
		private final Assignment cCaseContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCaseContentCaseContentParserRuleCall_0 = (RuleCall)cCaseContentAssignment.eContents().get(0);
		
		//SVarCase:
		//
		//	caseContent+=CaseContent+;
		public ParserRule getRule() { return rule; }

		//caseContent+=CaseContent+
		public Assignment getCaseContentAssignment() { return cCaseContentAssignment; }

		//CaseContent
		public RuleCall getCaseContentCaseContentParserRuleCall_0() { return cCaseContentCaseContentParserRuleCall_0; }
	}

	public class CaseContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaseContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCASEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCaseNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCaseNameAlternatives_1_0 = (Alternatives)cCaseNameAssignment_1.eContents().get(0);
		private final RuleCall cCaseNameIDTerminalRuleCall_1_0_0 = (RuleCall)cCaseNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cCaseNameSpecialIdentParserRuleCall_1_0_1 = (RuleCall)cCaseNameAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cContentAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cContentTableContentParserRuleCall_4_0_0 = (RuleCall)cContentAssignment_4_0.eContents().get(0);
		private final Assignment cContentAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cContentValueContentParserRuleCall_4_1_0 = (RuleCall)cContentAssignment_4_1.eContents().get(0);
		private final Assignment cContentAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cContentSumContentParserRuleCall_4_2_0 = (RuleCall)cContentAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CaseContent:
		//
		//	("case" | "CASE") caseName=(ID | SpecialIdent) "{" condition=Condition (content=TableContent | content=ValueContent |
		//
		//	content=SumContent) "}";
		public ParserRule getRule() { return rule; }

		//("case" | "CASE") caseName=(ID | SpecialIdent) "{" condition=Condition (content=TableContent | content=ValueContent |
		//
		//content=SumContent) "}"
		public Group getGroup() { return cGroup; }

		//"case" | "CASE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }

		//"CASE"
		public Keyword getCASEKeyword_0_1() { return cCASEKeyword_0_1; }

		//caseName=(ID | SpecialIdent)
		public Assignment getCaseNameAssignment_1() { return cCaseNameAssignment_1; }

		//ID | SpecialIdent
		public Alternatives getCaseNameAlternatives_1_0() { return cCaseNameAlternatives_1_0; }

		//ID
		public RuleCall getCaseNameIDTerminalRuleCall_1_0_0() { return cCaseNameIDTerminalRuleCall_1_0_0; }

		//SpecialIdent
		public RuleCall getCaseNameSpecialIdentParserRuleCall_1_0_1() { return cCaseNameSpecialIdentParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }

		//content=TableContent | content=ValueContent | content=SumContent
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//content=TableContent
		public Assignment getContentAssignment_4_0() { return cContentAssignment_4_0; }

		//TableContent
		public RuleCall getContentTableContentParserRuleCall_4_0_0() { return cContentTableContentParserRuleCall_4_0_0; }

		//content=ValueContent
		public Assignment getContentAssignment_4_1() { return cContentAssignment_4_1; }

		//ValueContent
		public RuleCall getContentValueContentParserRuleCall_4_1_0() { return cContentValueContentParserRuleCall_4_1_0; }

		//content=SumContent
		public Assignment getContentAssignment_4_2() { return cContentAssignment_4_2; }

		//SumContent
		public RuleCall getContentSumContentParserRuleCall_4_2_0() { return cContentSumContentParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SumContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSumKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSUMKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cHeaderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeaderSumHeaderParserRuleCall_1_0 = (RuleCall)cHeaderAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SumContent:
		//
		//	("sum" | "SUM") header=SumHeader expression=Expression;
		public ParserRule getRule() { return rule; }

		//("sum" | "SUM") header=SumHeader expression=Expression
		public Group getGroup() { return cGroup; }

		//"sum" | "SUM"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"sum"
		public Keyword getSumKeyword_0_0() { return cSumKeyword_0_0; }

		//"SUM"
		public Keyword getSUMKeyword_0_1() { return cSUMKeyword_0_1; }

		//header=SumHeader
		public Assignment getHeaderAssignment_1() { return cHeaderAssignment_1; }

		//SumHeader
		public RuleCall getHeaderSumHeaderParserRuleCall_1_0() { return cHeaderSumHeaderParserRuleCall_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class SumHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpression1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpression1ExpressionParserRuleCall_2_0 = (RuleCall)cExpression1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpression2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpression2ExpressionParserRuleCall_4_0 = (RuleCall)cExpression2Assignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SumHeader:
		//
		//	"(" "i=" expression1=Expression "," expression2=Expression ("," "-"? INT)? ")";
		public ParserRule getRule() { return rule; }

		//"(" "i=" expression1=Expression "," expression2=Expression ("," "-"? INT)? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"i="
		public Keyword getIKeyword_1() { return cIKeyword_1; }

		//expression1=Expression
		public Assignment getExpression1Assignment_2() { return cExpression1Assignment_2; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_2_0() { return cExpression1ExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//expression2=Expression
		public Assignment getExpression2Assignment_4() { return cExpression2Assignment_4; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_4_0() { return cExpression2ExpressionParserRuleCall_4_0; }

		//("," "-"? INT)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"-"?
		public Keyword getHyphenMinusKeyword_5_1() { return cHyphenMinusKeyword_5_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_5_2() { return cINTTerminalRuleCall_5_2; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ValueContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cVALUEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ValueContent:
		//
		//	("value" | "VALUE") expression=Expression;
		public ParserRule getRule() { return rule; }

		//("value" | "VALUE") expression=Expression
		public Group getGroup() { return cGroup; }

		//"value" | "VALUE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"value"
		public Keyword getValueKeyword_0_0() { return cValueKeyword_0_0; }

		//"VALUE"
		public Keyword getVALUEKeyword_0_1() { return cVALUEKeyword_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class TableContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSelectKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSELECTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTableNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTableNameAlternatives_1_0 = (Alternatives)cTableNameAssignment_1.eContents().get(0);
		private final RuleCall cTableNameIDTerminalRuleCall_1_0_0 = (RuleCall)cTableNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cTableNameSpecialIdentParserRuleCall_1_0_1 = (RuleCall)cTableNameAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cFROMKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cFromAlternatives_3_0 = (Alternatives)cFromAssignment_3.eContents().get(0);
		private final RuleCall cFromIDTerminalRuleCall_3_0_0 = (RuleCall)cFromAlternatives_3_0.eContents().get(0);
		private final RuleCall cFromSpecialIdentParserRuleCall_3_0_1 = (RuleCall)cFromAlternatives_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cGivenKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cGIVENKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Assignment cGivenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGivenAssignmentParserRuleCall_4_1_0 = (RuleCall)cGivenAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Keyword cUseKeyword_4_2_0 = (Keyword)cAlternatives_4_2.eContents().get(0);
		private final Keyword cUSEKeyword_4_2_1 = (Keyword)cAlternatives_4_2.eContents().get(1);
		private final Assignment cUseAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cUseIDTerminalRuleCall_4_3_0 = (RuleCall)cUseAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Keyword cWhereKeyword_5_0_0 = (Keyword)cAlternatives_5_0.eContents().get(0);
		private final Keyword cWHEREKeyword_5_0_1 = (Keyword)cAlternatives_5_0.eContents().get(1);
		private final Assignment cWhereAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cWhereWhereItemsParserRuleCall_5_1_0 = (RuleCall)cWhereAssignment_5_1.eContents().get(0);
		
		//TableContent:
		//
		//	("select" | "SELECT") tableName=(ID | SpecialIdent) ("from" | "FROM") from=(ID | SpecialIdent) (("given" | "GIVEN")
		//
		//	given=Assignment ("use" | "USE") use=ID)? (("where" | "WHERE") where=WhereItems)?;
		public ParserRule getRule() { return rule; }

		//("select" | "SELECT") tableName=(ID | SpecialIdent) ("from" | "FROM") from=(ID | SpecialIdent) (("given" | "GIVEN")
		//
		//given=Assignment ("use" | "USE") use=ID)? (("where" | "WHERE") where=WhereItems)?
		public Group getGroup() { return cGroup; }

		//"select" | "SELECT"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"select"
		public Keyword getSelectKeyword_0_0() { return cSelectKeyword_0_0; }

		//"SELECT"
		public Keyword getSELECTKeyword_0_1() { return cSELECTKeyword_0_1; }

		//tableName=(ID | SpecialIdent)
		public Assignment getTableNameAssignment_1() { return cTableNameAssignment_1; }

		//ID | SpecialIdent
		public Alternatives getTableNameAlternatives_1_0() { return cTableNameAlternatives_1_0; }

		//ID
		public RuleCall getTableNameIDTerminalRuleCall_1_0_0() { return cTableNameIDTerminalRuleCall_1_0_0; }

		//SpecialIdent
		public RuleCall getTableNameSpecialIdentParserRuleCall_1_0_1() { return cTableNameSpecialIdentParserRuleCall_1_0_1; }

		//"from" | "FROM"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"from"
		public Keyword getFromKeyword_2_0() { return cFromKeyword_2_0; }

		//"FROM"
		public Keyword getFROMKeyword_2_1() { return cFROMKeyword_2_1; }

		//from=(ID | SpecialIdent)
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//ID | SpecialIdent
		public Alternatives getFromAlternatives_3_0() { return cFromAlternatives_3_0; }

		//ID
		public RuleCall getFromIDTerminalRuleCall_3_0_0() { return cFromIDTerminalRuleCall_3_0_0; }

		//SpecialIdent
		public RuleCall getFromSpecialIdentParserRuleCall_3_0_1() { return cFromSpecialIdentParserRuleCall_3_0_1; }

		//(("given" | "GIVEN") given=Assignment ("use" | "USE") use=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"given" | "GIVEN"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"given"
		public Keyword getGivenKeyword_4_0_0() { return cGivenKeyword_4_0_0; }

		//"GIVEN"
		public Keyword getGIVENKeyword_4_0_1() { return cGIVENKeyword_4_0_1; }

		//given=Assignment
		public Assignment getGivenAssignment_4_1() { return cGivenAssignment_4_1; }

		//Assignment
		public RuleCall getGivenAssignmentParserRuleCall_4_1_0() { return cGivenAssignmentParserRuleCall_4_1_0; }

		//"use" | "USE"
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }

		//"use"
		public Keyword getUseKeyword_4_2_0() { return cUseKeyword_4_2_0; }

		//"USE"
		public Keyword getUSEKeyword_4_2_1() { return cUSEKeyword_4_2_1; }

		//use=ID
		public Assignment getUseAssignment_4_3() { return cUseAssignment_4_3; }

		//ID
		public RuleCall getUseIDTerminalRuleCall_4_3_0() { return cUseIDTerminalRuleCall_4_3_0; }

		//(("where" | "WHERE") where=WhereItems)?
		public Group getGroup_5() { return cGroup_5; }

		//"where" | "WHERE"
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//"where"
		public Keyword getWhereKeyword_5_0_0() { return cWhereKeyword_5_0_0; }

		//"WHERE"
		public Keyword getWHEREKeyword_5_0_1() { return cWHEREKeyword_5_0_1; }

		//where=WhereItems
		public Assignment getWhereAssignment_5_1() { return cWhereAssignment_5_1; }

		//WhereItems
		public RuleCall getWhereWhereItemsParserRuleCall_5_1_0() { return cWhereWhereItemsParserRuleCall_5_1_0; }
	}

	public class WhereItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereItems");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParserRuleCall_0_0 = (RuleCall)cAssignmentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignmentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignmentAssignmentParserRuleCall_1_1_0 = (RuleCall)cAssignmentAssignment_1_1.eContents().get(0);
		
		//WhereItems:
		//
		//	assignment+=Assignment ("," assignment+=Assignment)*;
		public ParserRule getRule() { return rule; }

		//assignment+=Assignment ("," assignment+=Assignment)*
		public Group getGroup() { return cGroup; }

		//assignment+=Assignment
		public Assignment getAssignmentAssignment_0() { return cAssignmentAssignment_0; }

		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_0_0() { return cAssignmentAssignmentParserRuleCall_0_0; }

		//("," assignment+=Assignment)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//assignment+=Assignment
		public Assignment getAssignmentAssignment_1_1() { return cAssignmentAssignment_1_1; }

		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_1_1_0() { return cAssignmentAssignmentParserRuleCall_1_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermTermSimpleParserRuleCall_0_0 = (RuleCall)cTermAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//
		//	term=TermSimple "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//term=TermSimple "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//term=TermSimple
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }

		//TermSimple
		public RuleCall getTermTermSimpleParserRuleCall_0_0() { return cTermTermSimpleParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class TermSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TermSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSpecialIdentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TermSimple:
		//
		//	ID | Number | Function | SpecialIdent;
		public ParserRule getRule() { return rule; }

		//ID | Number | Function | SpecialIdent
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }

		//Function
		public RuleCall getFunctionParserRuleCall_2() { return cFunctionParserRuleCall_2; }

		//SpecialIdent
		public RuleCall getSpecialIdentParserRuleCall_3() { return cSpecialIdentParserRuleCall_3; }
	}

	public class LowerAndOrUpperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LowerAndOrUpper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLowerUpperParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUpperLowerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LowerAndOrUpper:
		//
		//	lowerUpper | upperLower;
		public ParserRule getRule() { return rule; }

		//lowerUpper | upperLower
		public Alternatives getAlternatives() { return cAlternatives; }

		//lowerUpper
		public RuleCall getLowerUpperParserRuleCall_0() { return cLowerUpperParserRuleCall_0; }

		//upperLower
		public RuleCall getUpperLowerParserRuleCall_1() { return cUpperLowerParserRuleCall_1; }
	}

	public class UpperLowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "upperLower");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUpperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUpperUpperParserRuleCall_0_0 = (RuleCall)cUpperAssignment_0.eContents().get(0);
		private final Assignment cLowerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerLowerParserRuleCall_1_0 = (RuleCall)cLowerAssignment_1.eContents().get(0);
		
		//upperLower:
		//
		//	upper=Upper lower=Lower?;
		public ParserRule getRule() { return rule; }

		//upper=Upper lower=Lower?
		public Group getGroup() { return cGroup; }

		//upper=Upper
		public Assignment getUpperAssignment_0() { return cUpperAssignment_0; }

		//Upper
		public RuleCall getUpperUpperParserRuleCall_0_0() { return cUpperUpperParserRuleCall_0_0; }

		//lower=Lower?
		public Assignment getLowerAssignment_1() { return cLowerAssignment_1; }

		//Lower
		public RuleCall getLowerLowerParserRuleCall_1_0() { return cLowerLowerParserRuleCall_1_0; }
	}

	public class LowerUpperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lowerUpper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerLowerParserRuleCall_0_0 = (RuleCall)cLowerAssignment_0.eContents().get(0);
		private final Assignment cUpperAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUpperUpperParserRuleCall_1_0 = (RuleCall)cUpperAssignment_1.eContents().get(0);
		
		//lowerUpper:
		//
		//	lower=Lower upper=Upper?;
		public ParserRule getRule() { return rule; }

		//lower=Lower upper=Upper?
		public Group getGroup() { return cGroup; }

		//lower=Lower
		public Assignment getLowerAssignment_0() { return cLowerAssignment_0; }

		//Lower
		public RuleCall getLowerLowerParserRuleCall_0_0() { return cLowerLowerParserRuleCall_0_0; }

		//upper=Upper?
		public Assignment getUpperAssignment_1() { return cUpperAssignment_1; }

		//Upper
		public RuleCall getUpperUpperParserRuleCall_1_0() { return cUpperUpperParserRuleCall_1_0; }
	}

	public class UpperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Upper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUpperKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cUPPERKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cUpperAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cUnboundedKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cUNBOUNDEDKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//Upper:
		//
		//	("upper" | "UPPER") ({Upper} ("unbounded" | "UNBOUNDED") | expression=Expression);
		public ParserRule getRule() { return rule; }

		//("upper" | "UPPER") ({Upper} ("unbounded" | "UNBOUNDED") | expression=Expression)
		public Group getGroup() { return cGroup; }

		//"upper" | "UPPER"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"upper"
		public Keyword getUpperKeyword_0_0() { return cUpperKeyword_0_0; }

		//"UPPER"
		public Keyword getUPPERKeyword_0_1() { return cUPPERKeyword_0_1; }

		//{Upper} ("unbounded" | "UNBOUNDED") | expression=Expression
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{Upper} ("unbounded" | "UNBOUNDED")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Upper}
		public Action getUpperAction_1_0_0() { return cUpperAction_1_0_0; }

		//"unbounded" | "UNBOUNDED"
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//"unbounded"
		public Keyword getUnboundedKeyword_1_0_1_0() { return cUnboundedKeyword_1_0_1_0; }

		//"UNBOUNDED"
		public Keyword getUNBOUNDEDKeyword_1_0_1_1() { return cUNBOUNDEDKeyword_1_0_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class LowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lower");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLowerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLOWERKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cLowerAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cUnboundedKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cUNBOUNDEDKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//Lower:
		//
		//	("lower" | "LOWER") ({Lower} ("unbounded" | "UNBOUNDED") | expression=Expression);
		public ParserRule getRule() { return rule; }

		//("lower" | "LOWER") ({Lower} ("unbounded" | "UNBOUNDED") | expression=Expression)
		public Group getGroup() { return cGroup; }

		//"lower" | "LOWER"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"lower"
		public Keyword getLowerKeyword_0_0() { return cLowerKeyword_0_0; }

		//"LOWER"
		public Keyword getLOWERKeyword_0_1() { return cLOWERKeyword_0_1; }

		//{Lower} ("unbounded" | "UNBOUNDED") | expression=Expression
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{Lower} ("unbounded" | "UNBOUNDED")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Lower}
		public Action getLowerAction_1_0_0() { return cLowerAction_1_0_0; }

		//"unbounded" | "UNBOUNDED"
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//"unbounded"
		public Keyword getUnboundedKeyword_1_0_1_0() { return cUnboundedKeyword_1_0_1_0; }

		//"UNBOUNDED"
		public Keyword getUNBOUNDEDKeyword_1_0_1_1() { return cUNBOUNDEDKeyword_1_0_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cGoalKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cGOALKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTaTimeArraySizeParserRuleCall_1_0 = (RuleCall)cTaAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLocalAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cLocalAlternatives_2_1_0 = (Alternatives)cLocalAssignment_2_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_2_1_0_0 = (Keyword)cLocalAlternatives_2_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_2_1_0_1 = (Keyword)cLocalAlternatives_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDefinitionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cDefinitionAlternatives_5_0 = (Alternatives)cDefinitionAssignment_5.eContents().get(0);
		private final RuleCall cDefinitionGoalSimpleParserRuleCall_5_0_0 = (RuleCall)cDefinitionAlternatives_5_0.eContents().get(0);
		private final RuleCall cDefinitionGoalCaseParserRuleCall_5_0_1 = (RuleCall)cDefinitionAlternatives_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Goal:
		//
		//	("goal" | "GOAL") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? name=ID "{" definition=(GoalSimple |
		//
		//	GoalCase) "}";
		public ParserRule getRule() { return rule; }

		//("goal" | "GOAL") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? name=ID "{" definition=(GoalSimple | GoalCase)
		//
		//"}"
		public Group getGroup() { return cGroup; }

		//"goal" | "GOAL"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"goal"
		public Keyword getGoalKeyword_0_0() { return cGoalKeyword_0_0; }

		//"GOAL"
		public Keyword getGOALKeyword_0_1() { return cGOALKeyword_0_1; }

		//ta=TimeArraySize?
		public Assignment getTaAssignment_1() { return cTaAssignment_1; }

		//TimeArraySize
		public RuleCall getTaTimeArraySizeParserRuleCall_1_0() { return cTaTimeArraySizeParserRuleCall_1_0; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_2_1() { return cLocalAssignment_2_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_2_1_0() { return cLocalAlternatives_2_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_2_1_0_0() { return cLocalLocalKeyword_2_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_2_1_0_1() { return cLocalLOCALKeyword_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//definition=(GoalSimple | GoalCase)
		public Assignment getDefinitionAssignment_5() { return cDefinitionAssignment_5; }

		//GoalSimple | GoalCase
		public Alternatives getDefinitionAlternatives_5_0() { return cDefinitionAlternatives_5_0; }

		//GoalSimple
		public RuleCall getDefinitionGoalSimpleParserRuleCall_5_0_0() { return cDefinitionGoalSimpleParserRuleCall_5_0_0; }

		//GoalCase
		public RuleCall getDefinitionGoalCaseParserRuleCall_5_0_1() { return cDefinitionGoalCaseParserRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class GoalCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLhsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLHSKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsExpressionParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cContentGoalNoCaseContentParserRuleCall_2_0_0 = (RuleCall)cContentAssignment_2_0.eContents().get(0);
		private final Assignment cCaseContentAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCaseContentGoalCaseContentParserRuleCall_2_1_0 = (RuleCall)cCaseContentAssignment_2_1.eContents().get(0);
		
		//GoalCase:
		//
		//	("lhs" | "LHS") lhs=Expression (content=GoalNoCaseContent | caseContent+=GoalCaseContent+);
		public ParserRule getRule() { return rule; }

		//("lhs" | "LHS") lhs=Expression (content=GoalNoCaseContent | caseContent+=GoalCaseContent+)
		public Group getGroup() { return cGroup; }

		//"lhs" | "LHS"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"lhs"
		public Keyword getLhsKeyword_0_0() { return cLhsKeyword_0_0; }

		//"LHS"
		public Keyword getLHSKeyword_0_1() { return cLHSKeyword_0_1; }

		//lhs=Expression
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_1_0() { return cLhsExpressionParserRuleCall_1_0; }

		//content=GoalNoCaseContent | caseContent+=GoalCaseContent+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//content=GoalNoCaseContent
		public Assignment getContentAssignment_2_0() { return cContentAssignment_2_0; }

		//GoalNoCaseContent
		public RuleCall getContentGoalNoCaseContentParserRuleCall_2_0_0() { return cContentGoalNoCaseContentParserRuleCall_2_0_0; }

		//caseContent+=GoalCaseContent+
		public Assignment getCaseContentAssignment_2_1() { return cCaseContentAssignment_2_1; }

		//GoalCaseContent
		public RuleCall getCaseContentGoalCaseContentParserRuleCall_2_1_0() { return cCaseContentGoalCaseContentParserRuleCall_2_1_0; }
	}

	public class GoalCaseContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalCaseContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCASEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCaseNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCaseNameAlternatives_1_0 = (Alternatives)cCaseNameAssignment_1.eContents().get(0);
		private final RuleCall cCaseNameIDTerminalRuleCall_1_0_0 = (RuleCall)cCaseNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cCaseNameSpecialIdentParserRuleCall_1_0_1 = (RuleCall)cCaseNameAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cRhsKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cRHSKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExpressionParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Assignment cSubContentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubContentSubContentParserRuleCall_6_0 = (RuleCall)cSubContentAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GoalCaseContent:
		//
		//	("case" | "CASE") caseName=(ID | SpecialIdent) "{" condition=Condition ("rhs" | "RHS") rhs=Expression
		//
		//	subContent=SubContent? "}";
		public ParserRule getRule() { return rule; }

		//("case" | "CASE") caseName=(ID | SpecialIdent) "{" condition=Condition ("rhs" | "RHS") rhs=Expression
		//
		//subContent=SubContent? "}"
		public Group getGroup() { return cGroup; }

		//"case" | "CASE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }

		//"CASE"
		public Keyword getCASEKeyword_0_1() { return cCASEKeyword_0_1; }

		//caseName=(ID | SpecialIdent)
		public Assignment getCaseNameAssignment_1() { return cCaseNameAssignment_1; }

		//ID | SpecialIdent
		public Alternatives getCaseNameAlternatives_1_0() { return cCaseNameAlternatives_1_0; }

		//ID
		public RuleCall getCaseNameIDTerminalRuleCall_1_0_0() { return cCaseNameIDTerminalRuleCall_1_0_0; }

		//SpecialIdent
		public RuleCall getCaseNameSpecialIdentParserRuleCall_1_0_1() { return cCaseNameSpecialIdentParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }

		//"rhs" | "RHS"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"rhs"
		public Keyword getRhsKeyword_4_0() { return cRhsKeyword_4_0; }

		//"RHS"
		public Keyword getRHSKeyword_4_1() { return cRHSKeyword_4_1; }

		//rhs=Expression
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_5_0() { return cRhsExpressionParserRuleCall_5_0; }

		//subContent=SubContent?
		public Assignment getSubContentAssignment_6() { return cSubContentAssignment_6; }

		//SubContent
		public RuleCall getSubContentSubContentParserRuleCall_6_0() { return cSubContentSubContentParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class GoalNoCaseContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalNoCaseContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRhsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRHSKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cRhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRhsExpressionParserRuleCall_1_0 = (RuleCall)cRhsAssignment_1.eContents().get(0);
		private final Assignment cSubContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubContentSubContentParserRuleCall_2_0 = (RuleCall)cSubContentAssignment_2.eContents().get(0);
		
		//GoalNoCaseContent:
		//
		//	("rhs" | "RHS") rhs=Expression subContent=SubContent?;
		public ParserRule getRule() { return rule; }

		//("rhs" | "RHS") rhs=Expression subContent=SubContent?
		public Group getGroup() { return cGroup; }

		//"rhs" | "RHS"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"rhs"
		public Keyword getRhsKeyword_0_0() { return cRhsKeyword_0_0; }

		//"RHS"
		public Keyword getRHSKeyword_0_1() { return cRHSKeyword_0_1; }

		//rhs=Expression
		public Assignment getRhsAssignment_1() { return cRhsAssignment_1; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_1_0() { return cRhsExpressionParserRuleCall_1_0; }

		//subContent=SubContent?
		public Assignment getSubContentAssignment_2() { return cSubContentAssignment_2; }

		//SubContent
		public RuleCall getSubContentSubContentParserRuleCall_2_0() { return cSubContentSubContentParserRuleCall_2_0; }
	}

	public class SubContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cGtAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cGtLhsGtRhsParserRuleCall_0_0_0 = (RuleCall)cGtAssignment_0_0.eContents().get(0);
		private final Assignment cLtAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLtLhsLtRhsParserRuleCall_0_1_0 = (RuleCall)cLtAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLtAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLtLhsLtRhsParserRuleCall_1_0_0 = (RuleCall)cLtAssignment_1_0.eContents().get(0);
		private final Assignment cGtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGtLhsGtRhsParserRuleCall_1_1_0 = (RuleCall)cGtAssignment_1_1.eContents().get(0);
		
		////FIXME: replace with unordered groups
		// SubContent:
		//
		//	gt=LhsGtRhs lt=LhsLtRhs? | lt=LhsLtRhs gt=LhsGtRhs?;
		public ParserRule getRule() { return rule; }

		//gt=LhsGtRhs lt=LhsLtRhs? | lt=LhsLtRhs gt=LhsGtRhs?
		public Alternatives getAlternatives() { return cAlternatives; }

		//gt=LhsGtRhs lt=LhsLtRhs?
		public Group getGroup_0() { return cGroup_0; }

		//gt=LhsGtRhs
		public Assignment getGtAssignment_0_0() { return cGtAssignment_0_0; }

		//LhsGtRhs
		public RuleCall getGtLhsGtRhsParserRuleCall_0_0_0() { return cGtLhsGtRhsParserRuleCall_0_0_0; }

		//lt=LhsLtRhs?
		public Assignment getLtAssignment_0_1() { return cLtAssignment_0_1; }

		//LhsLtRhs
		public RuleCall getLtLhsLtRhsParserRuleCall_0_1_0() { return cLtLhsLtRhsParserRuleCall_0_1_0; }

		//lt=LhsLtRhs gt=LhsGtRhs?
		public Group getGroup_1() { return cGroup_1; }

		//lt=LhsLtRhs
		public Assignment getLtAssignment_1_0() { return cLtAssignment_1_0; }

		//LhsLtRhs
		public RuleCall getLtLhsLtRhsParserRuleCall_1_0_0() { return cLtLhsLtRhsParserRuleCall_1_0_0; }

		//gt=LhsGtRhs?
		public Assignment getGtAssignment_1_1() { return cGtAssignment_1_1; }

		//LhsGtRhs
		public RuleCall getGtLhsGtRhsParserRuleCall_1_1_0() { return cGtLhsGtRhsParserRuleCall_1_1_0; }
	}

	public class LhsGtRhsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LhsGtRhs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLhsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLHSKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cRhsKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cRHSKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Action cLhsGtRhsAction_3_0_0 = (Action)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Keyword cConstrainKeyword_3_0_1_0 = (Keyword)cAlternatives_3_0_1.eContents().get(0);
		private final Keyword cCONSTRAINKeyword_3_0_1_1 = (Keyword)cAlternatives_3_0_1.eContents().get(1);
		private final Assignment cPenaltyAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPenaltyPenaltyParserRuleCall_3_1_0 = (RuleCall)cPenaltyAssignment_3_1.eContents().get(0);
		
		//LhsGtRhs:
		//
		//	("lhs" | "LHS") ">" ("rhs" | "RHS") ({LhsGtRhs} ("constrain" | "CONSTRAIN") | penalty=Penalty);
		public ParserRule getRule() { return rule; }

		//("lhs" | "LHS") ">" ("rhs" | "RHS") ({LhsGtRhs} ("constrain" | "CONSTRAIN") | penalty=Penalty)
		public Group getGroup() { return cGroup; }

		//"lhs" | "LHS"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"lhs"
		public Keyword getLhsKeyword_0_0() { return cLhsKeyword_0_0; }

		//"LHS"
		public Keyword getLHSKeyword_0_1() { return cLHSKeyword_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//"rhs" | "RHS"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"rhs"
		public Keyword getRhsKeyword_2_0() { return cRhsKeyword_2_0; }

		//"RHS"
		public Keyword getRHSKeyword_2_1() { return cRHSKeyword_2_1; }

		//{LhsGtRhs} ("constrain" | "CONSTRAIN") | penalty=Penalty
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//{LhsGtRhs} ("constrain" | "CONSTRAIN")
		public Group getGroup_3_0() { return cGroup_3_0; }

		//{LhsGtRhs}
		public Action getLhsGtRhsAction_3_0_0() { return cLhsGtRhsAction_3_0_0; }

		//"constrain" | "CONSTRAIN"
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }

		//"constrain"
		public Keyword getConstrainKeyword_3_0_1_0() { return cConstrainKeyword_3_0_1_0; }

		//"CONSTRAIN"
		public Keyword getCONSTRAINKeyword_3_0_1_1() { return cCONSTRAINKeyword_3_0_1_1; }

		//penalty=Penalty
		public Assignment getPenaltyAssignment_3_1() { return cPenaltyAssignment_3_1; }

		//Penalty
		public RuleCall getPenaltyPenaltyParserRuleCall_3_1_0() { return cPenaltyPenaltyParserRuleCall_3_1_0; }
	}

	public class LhsLtRhsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LhsLtRhs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLhsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLHSKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cRhsKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cRHSKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Action cLhsLtRhsAction_3_0_0 = (Action)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Keyword cConstrainKeyword_3_0_1_0 = (Keyword)cAlternatives_3_0_1.eContents().get(0);
		private final Keyword cCONSTRAINKeyword_3_0_1_1 = (Keyword)cAlternatives_3_0_1.eContents().get(1);
		private final Assignment cPenaltyAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPenaltyPenaltyParserRuleCall_3_1_0 = (RuleCall)cPenaltyAssignment_3_1.eContents().get(0);
		
		//LhsLtRhs:
		//
		//	("lhs" | "LHS") "<" ("rhs" | "RHS") ({LhsLtRhs} ("constrain" | "CONSTRAIN") | penalty=Penalty);
		public ParserRule getRule() { return rule; }

		//("lhs" | "LHS") "<" ("rhs" | "RHS") ({LhsLtRhs} ("constrain" | "CONSTRAIN") | penalty=Penalty)
		public Group getGroup() { return cGroup; }

		//"lhs" | "LHS"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"lhs"
		public Keyword getLhsKeyword_0_0() { return cLhsKeyword_0_0; }

		//"LHS"
		public Keyword getLHSKeyword_0_1() { return cLHSKeyword_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//"rhs" | "RHS"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"rhs"
		public Keyword getRhsKeyword_2_0() { return cRhsKeyword_2_0; }

		//"RHS"
		public Keyword getRHSKeyword_2_1() { return cRHSKeyword_2_1; }

		//{LhsLtRhs} ("constrain" | "CONSTRAIN") | penalty=Penalty
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//{LhsLtRhs} ("constrain" | "CONSTRAIN")
		public Group getGroup_3_0() { return cGroup_3_0; }

		//{LhsLtRhs}
		public Action getLhsLtRhsAction_3_0_0() { return cLhsLtRhsAction_3_0_0; }

		//"constrain" | "CONSTRAIN"
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }

		//"constrain"
		public Keyword getConstrainKeyword_3_0_1_0() { return cConstrainKeyword_3_0_1_0; }

		//"CONSTRAIN"
		public Keyword getCONSTRAINKeyword_3_0_1_1() { return cCONSTRAINKeyword_3_0_1_1; }

		//penalty=Penalty
		public Assignment getPenaltyAssignment_3_1() { return cPenaltyAssignment_3_1; }

		//Penalty
		public RuleCall getPenaltyPenaltyParserRuleCall_3_1_0() { return cPenaltyPenaltyParserRuleCall_3_1_0; }
	}

	public class PenaltyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Penalty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPenaltyKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPENALTYKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Penalty:
		//
		//	("penalty" | "PENALTY") expression=Expression;
		public ParserRule getRule() { return rule; }

		//("penalty" | "PENALTY") expression=Expression
		public Group getGroup() { return cGroup; }

		//"penalty" | "PENALTY"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"penalty"
		public Keyword getPenaltyKeyword_0_0() { return cPenaltyKeyword_0_0; }

		//"PENALTY"
		public Keyword getPENALTYKeyword_0_1() { return cPENALTYKeyword_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class GoalSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalSimple");
		private final Assignment cConstraintAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstraintConstraintParserRuleCall_0 = (RuleCall)cConstraintAssignment.eContents().get(0);
		
		//GoalSimple:
		//
		//	constraint=Constraint;
		public ParserRule getRule() { return rule; }

		//constraint=Constraint
		public Assignment getConstraintAssignment() { return cConstraintAssignment; }

		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_0() { return cConstraintConstraintParserRuleCall_0; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorEqualsSignKeyword_1_0_2 = (Keyword)cOperatorAlternatives_1_0.eContents().get(2);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//Constraint:
		//
		//	lhs=Expression operator=("<" | ">" | "=") rhs=Expression;
		public ParserRule getRule() { return rule; }

		//lhs=Expression operator=("<" | ">" | "=") rhs=Expression
		public Group getGroup() { return cGroup; }

		//lhs=Expression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_0_0() { return cLhsExpressionParserRuleCall_0_0; }

		//operator=("<" | ">" | "=")
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//"<" | ">" | "="
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }

		//"<"
		public Keyword getOperatorLessThanSignKeyword_1_0_0() { return cOperatorLessThanSignKeyword_1_0_0; }

		//">"
		public Keyword getOperatorGreaterThanSignKeyword_1_0_1() { return cOperatorGreaterThanSignKeyword_1_0_1; }

		//"="
		public Keyword getOperatorEqualsSignKeyword_1_0_2() { return cOperatorEqualsSignKeyword_1_0_2; }

		//rhs=Expression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_2_0() { return cRhsExpressionParserRuleCall_2_0; }
	}

	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMODELKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPatternAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPatternPatternParserRuleCall_3_0_0 = (RuleCall)cPatternAssignment_3_0.eContents().get(0);
		private final Assignment cIfincitemsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cIfincitemsIfIncItemsParserRuleCall_3_1_0 = (RuleCall)cIfincitemsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//
		//	("model" | "MODEL") name=ID "{" (pattern+=Pattern | ifincitems+=IfIncItems)+ "}";
		public ParserRule getRule() { return rule; }

		//("model" | "MODEL") name=ID "{" (pattern+=Pattern | ifincitems+=IfIncItems)+ "}"
		public Group getGroup() { return cGroup; }

		//"model" | "MODEL"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"model"
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }

		//"MODEL"
		public Keyword getMODELKeyword_0_1() { return cMODELKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(pattern+=Pattern | ifincitems+=IfIncItems)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//pattern+=Pattern
		public Assignment getPatternAssignment_3_0() { return cPatternAssignment_3_0; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_3_0_0() { return cPatternPatternParserRuleCall_3_0_0; }

		//ifincitems+=IfIncItems
		public Assignment getIfincitemsAssignment_3_1() { return cIfincitemsAssignment_3_1; }

		//IfIncItems
		public RuleCall getIfincitemsIfIncItemsParserRuleCall_3_1_0() { return cIfincitemsIfIncItemsParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cInitialKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cInitialKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cINITIALKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Initial:
		//
		//	("initial" | "Initial" | "INITIAL") "{" pattern+=Pattern+ "}";
		public ParserRule getRule() { return rule; }

		//("initial" | "Initial" | "INITIAL") "{" pattern+=Pattern+ "}"
		public Group getGroup() { return cGroup; }

		//"initial" | "Initial" | "INITIAL"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"initial"
		public Keyword getInitialKeyword_0_0() { return cInitialKeyword_0_0; }

		//"Initial"
		public Keyword getInitialKeyword_0_1() { return cInitialKeyword_0_1; }

		//"INITIAL"
		public Keyword getINITIALKeyword_0_2() { return cINITIALKeyword_0_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//pattern+=Pattern+
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSequenceKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSEQUENCEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cModelKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cMODELKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cModelModelCrossReference_4_0 = (CrossReference)cModelAssignment_4.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_4_0_1 = (RuleCall)cModelModelCrossReference_4_0.eContents().get(1);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionConditionParserRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cORDERTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Assignment cOrderAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOrderINTTerminalRuleCall_6_1_0 = (RuleCall)cOrderAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cTimeStepParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final RuleCall cTimeStepValueParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Sequence:
		//
		//	("sequence" | "SEQUENCE") name=ID "{" ("model" | "MODEL") model=[Model] condition=Condition? (ORDER order=INT)?
		//
		//	(TimeStep TimeStepValue)? "}";
		public ParserRule getRule() { return rule; }

		//("sequence" | "SEQUENCE") name=ID "{" ("model" | "MODEL") model=[Model] condition=Condition? (ORDER order=INT)?
		//
		//(TimeStep TimeStepValue)? "}"
		public Group getGroup() { return cGroup; }

		//"sequence" | "SEQUENCE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"sequence"
		public Keyword getSequenceKeyword_0_0() { return cSequenceKeyword_0_0; }

		//"SEQUENCE"
		public Keyword getSEQUENCEKeyword_0_1() { return cSEQUENCEKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"model" | "MODEL"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"model"
		public Keyword getModelKeyword_3_0() { return cModelKeyword_3_0; }

		//"MODEL"
		public Keyword getMODELKeyword_3_1() { return cMODELKeyword_3_1; }

		//model=[Model]
		public Assignment getModelAssignment_4() { return cModelAssignment_4; }

		//[Model]
		public CrossReference getModelModelCrossReference_4_0() { return cModelModelCrossReference_4_0; }

		//ID
		public RuleCall getModelModelIDTerminalRuleCall_4_0_1() { return cModelModelIDTerminalRuleCall_4_0_1; }

		//condition=Condition?
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_5_0() { return cConditionConditionParserRuleCall_5_0; }

		//(ORDER order=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//ORDER
		public RuleCall getORDERTerminalRuleCall_6_0() { return cORDERTerminalRuleCall_6_0; }

		//order=INT
		public Assignment getOrderAssignment_6_1() { return cOrderAssignment_6_1; }

		//INT
		public RuleCall getOrderINTTerminalRuleCall_6_1_0() { return cOrderINTTerminalRuleCall_6_1_0; }

		//(TimeStep TimeStepValue)?
		public Group getGroup_7() { return cGroup_7; }

		//TimeStep
		public RuleCall getTimeStepParserRuleCall_7_0() { return cTimeStepParserRuleCall_7_0; }

		//TimeStepValue
		public RuleCall getTimeStepValueParserRuleCall_7_1() { return cTimeStepValueParserRuleCall_7_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cConditionKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCONDITIONKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLogicalAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLogicalLogicalExpressionParserRuleCall_1_0_0 = (RuleCall)cLogicalAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cConditionAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final RuleCall cALWAYSTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Condition:
		//
		//	("condition" | "CONDITION") (logical=LogicalExpression | {Condition} ALWAYS);
		public ParserRule getRule() { return rule; }

		//("condition" | "CONDITION") (logical=LogicalExpression | {Condition} ALWAYS)
		public Group getGroup() { return cGroup; }

		//"condition" | "CONDITION"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"condition"
		public Keyword getConditionKeyword_0_0() { return cConditionKeyword_0_0; }

		//"CONDITION"
		public Keyword getCONDITIONKeyword_0_1() { return cCONDITIONKeyword_0_1; }

		//logical=LogicalExpression | {Condition} ALWAYS
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//logical=LogicalExpression
		public Assignment getLogicalAssignment_1_0() { return cLogicalAssignment_1_0; }

		//LogicalExpression
		public RuleCall getLogicalLogicalExpressionParserRuleCall_1_0_0() { return cLogicalLogicalExpressionParserRuleCall_1_0_0; }

		//{Condition} ALWAYS
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{Condition}
		public Action getConditionAction_1_1_0() { return cConditionAction_1_1_0; }

		//ALWAYS
		public RuleCall getALWAYSTerminalRuleCall_1_1_1() { return cALWAYSTerminalRuleCall_1_1_1; }
	}

	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cC1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cC1ConditionalUnaryParserRuleCall_0_0 = (RuleCall)cC1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBinaryOpParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cC2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cC2ConditionalUnaryParserRuleCall_1_1_0 = (RuleCall)cC2Assignment_1_1.eContents().get(0);
		
		//LogicalExpression:
		//
		//	c1=ConditionalUnary (BinaryOp c2+=ConditionalUnary)*;
		public ParserRule getRule() { return rule; }

		//c1=ConditionalUnary (BinaryOp c2+=ConditionalUnary)*
		public Group getGroup() { return cGroup; }

		//c1=ConditionalUnary
		public Assignment getC1Assignment_0() { return cC1Assignment_0; }

		//ConditionalUnary
		public RuleCall getC1ConditionalUnaryParserRuleCall_0_0() { return cC1ConditionalUnaryParserRuleCall_0_0; }

		//(BinaryOp c2+=ConditionalUnary)*
		public Group getGroup_1() { return cGroup_1; }

		//BinaryOp
		public RuleCall getBinaryOpParserRuleCall_1_0() { return cBinaryOpParserRuleCall_1_0; }

		//c2+=ConditionalUnary
		public Assignment getC2Assignment_1_1() { return cC2Assignment_1_1; }

		//ConditionalUnary
		public RuleCall getC2ConditionalUnaryParserRuleCall_1_1_0() { return cC2ConditionalUnaryParserRuleCall_1_1_0; }
	}

	public class BinaryOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cORTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BinaryOp:
		//
		//	OR | AND;
		public ParserRule getRule() { return rule; }

		//OR | AND
		public Alternatives getAlternatives() { return cAlternatives; }

		//OR
		public RuleCall getORTerminalRuleCall_0() { return cORTerminalRuleCall_0; }

		//AND
		public RuleCall getANDTerminalRuleCall_1() { return cANDTerminalRuleCall_1; }
	}

	public class ConditionalUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalUnary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalNegationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConditionalTermParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ConditionalUnary:
		//
		//	ConditionalNegation? ConditionalTerm;
		public ParserRule getRule() { return rule; }

		//ConditionalNegation? ConditionalTerm
		public Group getGroup() { return cGroup; }

		//ConditionalNegation?
		public RuleCall getConditionalNegationParserRuleCall_0() { return cConditionalNegationParserRuleCall_0; }

		//ConditionalTerm
		public RuleCall getConditionalTermParserRuleCall_1() { return cConditionalTermParserRuleCall_1; }
	}

	public class ConditionalNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalNegation");
		private final RuleCall cNOTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConditionalNegation:
		//
		//	NOT;
		public ParserRule getRule() { return rule; }

		//NOT
		public RuleCall getNOTTerminalRuleCall() { return cNOTTerminalRuleCall; }
	}

	public class ConditionalTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cE1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cE1ExpressionParserRuleCall_0_0_0 = (RuleCall)cE1Assignment_0_0.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cE2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cE2ExpressionParserRuleCall_0_2_0 = (RuleCall)cE2Assignment_0_2.eContents().get(0);
		private final RuleCall cLogicalFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cLogicalExpressionParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		
		//ConditionalTerm:
		//
		//	e1=Expression Relation e2=Expression | LogicalFunction | => ("(" LogicalExpression ")");
		public ParserRule getRule() { return rule; }

		//e1=Expression Relation e2=Expression | LogicalFunction | => ("(" LogicalExpression ")")
		public Alternatives getAlternatives() { return cAlternatives; }

		//e1=Expression Relation e2=Expression
		public Group getGroup_0() { return cGroup_0; }

		//e1=Expression
		public Assignment getE1Assignment_0_0() { return cE1Assignment_0_0; }

		//Expression
		public RuleCall getE1ExpressionParserRuleCall_0_0_0() { return cE1ExpressionParserRuleCall_0_0_0; }

		//Relation
		public RuleCall getRelationParserRuleCall_0_1() { return cRelationParserRuleCall_0_1; }

		//e2=Expression
		public Assignment getE2Assignment_0_2() { return cE2Assignment_0_2; }

		//Expression
		public RuleCall getE2ExpressionParserRuleCall_0_2_0() { return cE2ExpressionParserRuleCall_0_2_0; }

		//LogicalFunction
		public RuleCall getLogicalFunctionParserRuleCall_1() { return cLogicalFunctionParserRuleCall_1; }

		//=> ("(" LogicalExpression ")")
		public Group getGroup_2() { return cGroup_2; }

		//"(" LogicalExpression ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }

		//LogicalExpression
		public RuleCall getLogicalExpressionParserRuleCall_2_0_1() { return cLogicalExpressionParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSolidusEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Relation:
		//
		//	">" | "<" | ">=" | "<=" | "==" | "/=";
		public ParserRule getRule() { return rule; }

		//">" | "<" | ">=" | "<=" | "==" | "/="
		public Alternatives getAlternatives() { return cAlternatives; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_5() { return cSolidusEqualsSignKeyword_5; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAddParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//
		//	Add;
		public ParserRule getRule() { return rule; }

		//Add
		public RuleCall getAddParserRuleCall() { return cAddParserRuleCall; }
	}

	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cM1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cM1MultiplyParserRuleCall_0_0 = (RuleCall)cM1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cM2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cM2MultiplyParserRuleCall_1_1_0 = (RuleCall)cM2Assignment_1_1.eContents().get(0);
		
		//Add:
		//
		//	m1=Multiply (("+" | "-") m2+=Multiply)*;
		public ParserRule getRule() { return rule; }

		//m1=Multiply (("+" | "-") m2+=Multiply)*
		public Group getGroup() { return cGroup; }

		//m1=Multiply
		public Assignment getM1Assignment_0() { return cM1Assignment_0; }

		//Multiply
		public RuleCall getM1MultiplyParserRuleCall_0_0() { return cM1MultiplyParserRuleCall_0_0; }

		//(("+" | "-") m2+=Multiply)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//m2+=Multiply
		public Assignment getM2Assignment_1_1() { return cM2Assignment_1_1; }

		//Multiply
		public RuleCall getM2MultiplyParserRuleCall_1_1_0() { return cM2MultiplyParserRuleCall_1_1_0; }
	}

	public class MultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cU1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cU1UnaryParserRuleCall_0_0 = (RuleCall)cU1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cU2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cU2UnaryParserRuleCall_1_1_0 = (RuleCall)cU2Assignment_1_1.eContents().get(0);
		
		//Multiply:
		//
		//	u1=Unary (("*" | "/") u2+=Unary)*;
		public ParserRule getRule() { return rule; }

		//u1=Unary (("*" | "/") u2+=Unary)*
		public Group getGroup() { return cGroup; }

		//u1=Unary
		public Assignment getU1Assignment_0() { return cU1Assignment_0; }

		//Unary
		public RuleCall getU1UnaryParserRuleCall_0_0() { return cU1UnaryParserRuleCall_0_0; }

		//(("*" | "/") u2+=Unary)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//u2+=Unary
		public Assignment getU2Assignment_1_1() { return cU2Assignment_1_1; }

		//Unary
		public RuleCall getU2UnaryParserRuleCall_1_1_0() { return cU2UnaryParserRuleCall_1_1_0; }
	}

	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cNegationParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTermParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Unary:
		//
		//	("+" | Negation)? Term;
		public ParserRule getRule() { return rule; }

		//("+" | Negation)? Term
		public Group getGroup() { return cGroup; }

		//("+" | Negation)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//Negation
		public RuleCall getNegationParserRuleCall_0_1() { return cNegationParserRuleCall_0_1; }

		//Term
		public RuleCall getTermParserRuleCall_1() { return cTermParserRuleCall_1; }
	}

	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Negation");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//Negation:
		//
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRefDeclarationCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cRefDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cNAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNNumberParserRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		private final Assignment cFAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFFunctionParserRuleCall_2_0 = (RuleCall)cFAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_3_1_0 = (RuleCall)cEAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSSpecialIdentParserRuleCall_4_0 = (RuleCall)cSAssignment_4.eContents().get(0);
		private final RuleCall cMultiStepParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Term:
		//
		//	ref=[Declaration] | n=Number | f=Function | "(" e=Expression ")" | s=SpecialIdent | MultiStep;
		public ParserRule getRule() { return rule; }

		//ref=[Declaration] | n=Number | f=Function | "(" e=Expression ")" | s=SpecialIdent | MultiStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//ref=[Declaration]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_0_0() { return cRefDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_0_0_1() { return cRefDeclarationIDTerminalRuleCall_0_0_1; }

		//n=Number
		public Assignment getNAssignment_1() { return cNAssignment_1; }

		//Number
		public RuleCall getNNumberParserRuleCall_1_0() { return cNNumberParserRuleCall_1_0; }

		//f=Function
		public Assignment getFAssignment_2() { return cFAssignment_2; }

		//Function
		public RuleCall getFFunctionParserRuleCall_2_0() { return cFFunctionParserRuleCall_2_0; }

		//"(" e=Expression ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//e=Expression
		public Assignment getEAssignment_3_1() { return cEAssignment_3_1; }

		//Expression
		public RuleCall getEExpressionParserRuleCall_3_1_0() { return cEExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//s=SpecialIdent
		public Assignment getSAssignment_4() { return cSAssignment_4; }

		//SpecialIdent
		public RuleCall getSSpecialIdentParserRuleCall_4_0() { return cSSpecialIdentParserRuleCall_4_0; }

		//MultiStep
		public RuleCall getMultiStepParserRuleCall_5() { return cMultiStepParserRuleCall_5; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExternalFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMaxFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMinFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cSumContentParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cModFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIntFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAbsFunctionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPowFunctionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLogFunctionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cVarModelParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cVarModelStepParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cVarModelIndexParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cVarModelIndexStepParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Function:
		//
		//	ExternalFunction | MaxFunction | MinFunction | "(" SumContent ")" | ModFunction | IntFunction | AbsFunction |
		//
		//	PowFunction | LogFunction | VarModel | VarModelStep | VarModelIndex | VarModelIndexStep;
		public ParserRule getRule() { return rule; }

		//ExternalFunction | MaxFunction | MinFunction | "(" SumContent ")" | ModFunction | IntFunction | AbsFunction |
		//
		//PowFunction | LogFunction | VarModel | VarModelStep | VarModelIndex | VarModelIndexStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExternalFunction
		public RuleCall getExternalFunctionParserRuleCall_0() { return cExternalFunctionParserRuleCall_0; }

		//MaxFunction
		public RuleCall getMaxFunctionParserRuleCall_1() { return cMaxFunctionParserRuleCall_1; }

		//MinFunction
		public RuleCall getMinFunctionParserRuleCall_2() { return cMinFunctionParserRuleCall_2; }

		//"(" SumContent ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//SumContent
		public RuleCall getSumContentParserRuleCall_3_1() { return cSumContentParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//ModFunction
		public RuleCall getModFunctionParserRuleCall_4() { return cModFunctionParserRuleCall_4; }

		//IntFunction
		public RuleCall getIntFunctionParserRuleCall_5() { return cIntFunctionParserRuleCall_5; }

		//AbsFunction
		public RuleCall getAbsFunctionParserRuleCall_6() { return cAbsFunctionParserRuleCall_6; }

		//PowFunction
		public RuleCall getPowFunctionParserRuleCall_7() { return cPowFunctionParserRuleCall_7; }

		//LogFunction
		public RuleCall getLogFunctionParserRuleCall_8() { return cLogFunctionParserRuleCall_8; }

		//VarModel
		public RuleCall getVarModelParserRuleCall_9() { return cVarModelParserRuleCall_9; }

		//VarModelStep
		public RuleCall getVarModelStepParserRuleCall_10() { return cVarModelStepParserRuleCall_10; }

		//VarModelIndex
		public RuleCall getVarModelIndexParserRuleCall_11() { return cVarModelIndexParserRuleCall_11; }

		//VarModelIndexStep
		public RuleCall getVarModelIndexStepParserRuleCall_12() { return cVarModelIndexStepParserRuleCall_12; }
	}

	public class ExternalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cRefDeclarationCrossReference_0_0_0 = (CrossReference)cRefAssignment_0_0.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cRefDeclarationCrossReference_0_0_0.eContents().get(1);
		private final RuleCall cTafCfsParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cMonthParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1ExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cE2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cE2ExpressionParserRuleCall_3_1_0 = (RuleCall)cE2Assignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalFunction:
		//
		//	(ref=[Declaration] | TafCfs | Month) "(" e1=Expression ("," e2+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//(ref=[Declaration] | TafCfs | Month) "(" e1=Expression ("," e2+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//ref=[Declaration] | TafCfs | Month
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ref=[Declaration]
		public Assignment getRefAssignment_0_0() { return cRefAssignment_0_0; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_0_0_0() { return cRefDeclarationCrossReference_0_0_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_0_0_0_1() { return cRefDeclarationIDTerminalRuleCall_0_0_0_1; }

		//TafCfs
		public RuleCall getTafCfsParserRuleCall_0_1() { return cTafCfsParserRuleCall_0_1; }

		//Month
		public RuleCall getMonthParserRuleCall_0_2() { return cMonthParserRuleCall_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=Expression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//Expression
		public RuleCall getE1ExpressionParserRuleCall_2_0() { return cE1ExpressionParserRuleCall_2_0; }

		//("," e2+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//e2+=Expression
		public Assignment getE2Assignment_3_1() { return cE2Assignment_3_1; }

		//Expression
		public RuleCall getE2ExpressionParserRuleCall_3_1_0() { return cE2ExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MaxFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMAXTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1ExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cE2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cE2ExpressionParserRuleCall_3_1_0 = (RuleCall)cE2Assignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MaxFunction:
		//
		//	MAX "(" e1=Expression ("," e2+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//MAX "(" e1=Expression ("," e2+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//MAX
		public RuleCall getMAXTerminalRuleCall_0() { return cMAXTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=Expression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//Expression
		public RuleCall getE1ExpressionParserRuleCall_2_0() { return cE1ExpressionParserRuleCall_2_0; }

		//("," e2+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//e2+=Expression
		public Assignment getE2Assignment_3_1() { return cE2Assignment_3_1; }

		//Expression
		public RuleCall getE2ExpressionParserRuleCall_3_1_0() { return cE2ExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MinFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMINTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1ExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cE2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cE2ExpressionParserRuleCall_3_1_0 = (RuleCall)cE2Assignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MinFunction:
		//
		//	MIN "(" e1=Expression ("," e2+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//MIN "(" e1=Expression ("," e2+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//MIN
		public RuleCall getMINTerminalRuleCall_0() { return cMINTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=Expression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//Expression
		public RuleCall getE1ExpressionParserRuleCall_2_0() { return cE1ExpressionParserRuleCall_2_0; }

		//("," e2+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//e2+=Expression
		public Assignment getE2Assignment_3_1() { return cE2Assignment_3_1; }

		//Expression
		public RuleCall getE2ExpressionParserRuleCall_3_1_0() { return cE2ExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ModFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMODTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1ExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cE2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE2ExpressionParserRuleCall_4_0 = (RuleCall)cE2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ModFunction:
		//
		//	MOD "(" e1=Expression "," e2=Expression ")";
		public ParserRule getRule() { return rule; }

		//MOD "(" e1=Expression "," e2=Expression ")"
		public Group getGroup() { return cGroup; }

		//MOD
		public RuleCall getMODTerminalRuleCall_0() { return cMODTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=Expression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//Expression
		public RuleCall getE1ExpressionParserRuleCall_2_0() { return cE1ExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//e2=Expression
		public Assignment getE2Assignment_4() { return cE2Assignment_4; }

		//Expression
		public RuleCall getE2ExpressionParserRuleCall_4_0() { return cE2ExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class IntFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTFUNCTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExpressionParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IntFunction:
		//
		//	INTFUNC "(" e=Expression ")";
		public ParserRule getRule() { return rule; }

		//INTFUNC "(" e=Expression ")"
		public Group getGroup() { return cGroup; }

		//INTFUNC
		public RuleCall getINTFUNCTerminalRuleCall_0() { return cINTFUNCTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e=Expression
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//Expression
		public RuleCall getEExpressionParserRuleCall_2_0() { return cEExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AbsFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbsFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cABSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExpressionParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AbsFunction:
		//
		//	ABS "(" e=Expression ")";
		public ParserRule getRule() { return rule; }

		//ABS "(" e=Expression ")"
		public Group getGroup() { return cGroup; }

		//ABS
		public RuleCall getABSTerminalRuleCall_0() { return cABSTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e=Expression
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//Expression
		public RuleCall getEExpressionParserRuleCall_2_0() { return cEExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PowFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PowFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPOWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1ExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cE2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE2ExpressionParserRuleCall_4_0 = (RuleCall)cE2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PowFunction:
		//
		//	POW "(" e1=Expression "," e2=Expression ")";
		public ParserRule getRule() { return rule; }

		//POW "(" e1=Expression "," e2=Expression ")"
		public Group getGroup() { return cGroup; }

		//POW
		public RuleCall getPOWTerminalRuleCall_0() { return cPOWTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=Expression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//Expression
		public RuleCall getE1ExpressionParserRuleCall_2_0() { return cE1ExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//e2=Expression
		public Assignment getE2Assignment_4() { return cE2Assignment_4; }

		//Expression
		public RuleCall getE2ExpressionParserRuleCall_4_0() { return cE2ExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class LogFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLOGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExpressionParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LogFunction:
		//
		//	LOG "(" e=Expression ")";
		public ParserRule getRule() { return rule; }

		//LOG "(" e=Expression ")"
		public Group getGroup() { return cGroup; }

		//LOG
		public RuleCall getLOGTerminalRuleCall_0() { return cLOGTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e=Expression
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//Expression
		public RuleCall getEExpressionParserRuleCall_2_0() { return cEExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LogicalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalFunction");
		private final RuleCall cRangeFunctionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LogicalFunction:
		//
		//	RangeFunction;
		public ParserRule getRule() { return rule; }

		//RangeFunction
		public RuleCall getRangeFunctionParserRuleCall() { return cRangeFunctionParserRuleCall; }
	}

	public class VarModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRef1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRef1DeclarationCrossReference_0_0 = (CrossReference)cRef1Assignment_0.eContents().get(0);
		private final RuleCall cRef1DeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cRef1DeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRef2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRef2ModelCrossReference_2_0 = (CrossReference)cRef2Assignment_2.eContents().get(0);
		private final RuleCall cRef2ModelIDTerminalRuleCall_2_0_1 = (RuleCall)cRef2ModelCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarModel:
		//
		//	ref1=[Declaration] "[" ref2=[Model] "]";
		public ParserRule getRule() { return rule; }

		//ref1=[Declaration] "[" ref2=[Model] "]"
		public Group getGroup() { return cGroup; }

		//ref1=[Declaration]
		public Assignment getRef1Assignment_0() { return cRef1Assignment_0; }

		//[Declaration]
		public CrossReference getRef1DeclarationCrossReference_0_0() { return cRef1DeclarationCrossReference_0_0; }

		//ID
		public RuleCall getRef1DeclarationIDTerminalRuleCall_0_0_1() { return cRef1DeclarationIDTerminalRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//ref2=[Model]
		public Assignment getRef2Assignment_2() { return cRef2Assignment_2; }

		//[Model]
		public CrossReference getRef2ModelCrossReference_2_0() { return cRef2ModelCrossReference_2_0; }

		//ID
		public RuleCall getRef2ModelIDTerminalRuleCall_2_0_1() { return cRef2ModelIDTerminalRuleCall_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class VarModelStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarModelStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRef1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRef1DeclarationCrossReference_0_0 = (CrossReference)cRef1Assignment_0.eContents().get(0);
		private final RuleCall cRef1DeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cRef1DeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRef2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRef2ModelCrossReference_2_0 = (CrossReference)cRef2Assignment_2.eContents().get(0);
		private final RuleCall cRef2ModelIDTerminalRuleCall_2_0_1 = (RuleCall)cRef2ModelCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEExpressionParserRuleCall_5_0 = (RuleCall)cEAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VarModelStep:
		//
		//	ref1=[Declaration] "[" ref2=[Model] "]" "(" e=Expression ")";
		public ParserRule getRule() { return rule; }

		//ref1=[Declaration] "[" ref2=[Model] "]" "(" e=Expression ")"
		public Group getGroup() { return cGroup; }

		//ref1=[Declaration]
		public Assignment getRef1Assignment_0() { return cRef1Assignment_0; }

		//[Declaration]
		public CrossReference getRef1DeclarationCrossReference_0_0() { return cRef1DeclarationCrossReference_0_0; }

		//ID
		public RuleCall getRef1DeclarationIDTerminalRuleCall_0_0_1() { return cRef1DeclarationIDTerminalRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//ref2=[Model]
		public Assignment getRef2Assignment_2() { return cRef2Assignment_2; }

		//[Model]
		public CrossReference getRef2ModelCrossReference_2_0() { return cRef2ModelCrossReference_2_0; }

		//ID
		public RuleCall getRef2ModelIDTerminalRuleCall_2_0_1() { return cRef2ModelIDTerminalRuleCall_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//e=Expression
		public Assignment getEAssignment_5() { return cEAssignment_5; }

		//Expression
		public RuleCall getEExpressionParserRuleCall_5_0() { return cEExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class VarModelIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarModelIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRef1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRef1DeclarationCrossReference_0_0 = (CrossReference)cRef1Assignment_0.eContents().get(0);
		private final RuleCall cRef1DeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cRef1DeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarModelIndex:
		//
		//	ref1=[Declaration] "[" "-" INT "]";
		public ParserRule getRule() { return rule; }

		//ref1=[Declaration] "[" "-" INT "]"
		public Group getGroup() { return cGroup; }

		//ref1=[Declaration]
		public Assignment getRef1Assignment_0() { return cRef1Assignment_0; }

		//[Declaration]
		public CrossReference getRef1DeclarationCrossReference_0_0() { return cRef1DeclarationCrossReference_0_0; }

		//ID
		public RuleCall getRef1DeclarationIDTerminalRuleCall_0_0_1() { return cRef1DeclarationIDTerminalRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class VarModelIndexStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarModelIndexStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRef1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRef1DeclarationCrossReference_0_0 = (CrossReference)cRef1Assignment_0.eContents().get(0);
		private final RuleCall cRef1DeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cRef1DeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEExpressionParserRuleCall_6_0 = (RuleCall)cEAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//VarModelIndexStep:
		//
		//	ref1=[Declaration] "[" "-" INT "]" "(" e=Expression ")";
		public ParserRule getRule() { return rule; }

		//ref1=[Declaration] "[" "-" INT "]" "(" e=Expression ")"
		public Group getGroup() { return cGroup; }

		//ref1=[Declaration]
		public Assignment getRef1Assignment_0() { return cRef1Assignment_0; }

		//[Declaration]
		public CrossReference getRef1DeclarationCrossReference_0_0() { return cRef1DeclarationCrossReference_0_0; }

		//ID
		public RuleCall getRef1DeclarationIDTerminalRuleCall_0_0_1() { return cRef1DeclarationIDTerminalRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//e=Expression
		public Assignment getEAssignment_6() { return cEAssignment_6; }

		//Expression
		public RuleCall getEExpressionParserRuleCall_6_0() { return cEExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class RangeFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRANGETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cMonthParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cWaterYearParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final RuleCall cCalendarMonthParserRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		private final RuleCall cPrevMonthParserRuleCall_4_2 = (RuleCall)cAlternatives_4.eContents().get(2);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final RuleCall cIDTerminalRuleCall_6_0 = (RuleCall)cAlternatives_6.eContents().get(0);
		private final RuleCall cCalendarMonthParserRuleCall_6_1 = (RuleCall)cAlternatives_6.eContents().get(1);
		private final RuleCall cPrevMonthParserRuleCall_6_2 = (RuleCall)cAlternatives_6.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RangeFunction:
		//
		//	RANGE "(" (ID | Month | WaterYear) "," (ID | CalendarMonth | PrevMonth) "," (ID | CalendarMonth | PrevMonth) ")";
		public ParserRule getRule() { return rule; }

		//RANGE "(" (ID | Month | WaterYear) "," (ID | CalendarMonth | PrevMonth) "," (ID | CalendarMonth | PrevMonth) ")"
		public Group getGroup() { return cGroup; }

		//RANGE
		public RuleCall getRANGETerminalRuleCall_0() { return cRANGETerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ID | Month | WaterYear
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }

		//Month
		public RuleCall getMonthParserRuleCall_2_1() { return cMonthParserRuleCall_2_1; }

		//WaterYear
		public RuleCall getWaterYearParserRuleCall_2_2() { return cWaterYearParserRuleCall_2_2; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//ID | CalendarMonth | PrevMonth
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_0() { return cIDTerminalRuleCall_4_0; }

		//CalendarMonth
		public RuleCall getCalendarMonthParserRuleCall_4_1() { return cCalendarMonthParserRuleCall_4_1; }

		//PrevMonth
		public RuleCall getPrevMonthParserRuleCall_4_2() { return cPrevMonthParserRuleCall_4_2; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//ID | CalendarMonth | PrevMonth
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//ID
		public RuleCall getIDTerminalRuleCall_6_0() { return cIDTerminalRuleCall_6_0; }

		//CalendarMonth
		public RuleCall getCalendarMonthParserRuleCall_6_1() { return cCalendarMonthParserRuleCall_6_1; }

		//PrevMonth
		public RuleCall getPrevMonthParserRuleCall_6_2() { return cPrevMonthParserRuleCall_6_2; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class IdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ident");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Ident:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Number:
		//
		//	INT | FLOAT;
		public ParserRule getRule() { return rule; }

		//INT | FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }
	}

	public class IncludeFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIncludeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cINCLUDEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLocalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cLocalAlternatives_1_1_0 = (Alternatives)cLocalAssignment_1_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_1_1_0_0 = (Keyword)cLocalAlternatives_1_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_1_1_0_1 = (Keyword)cLocalAlternatives_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileSTRINGTerminalRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		
		//IncludeFile:
		//
		//	("include" | "INCLUDE") ("[" local?=("local" | "LOCAL") "]")? file=STRING;
		public ParserRule getRule() { return rule; }

		//("include" | "INCLUDE") ("[" local?=("local" | "LOCAL") "]")? file=STRING
		public Group getGroup() { return cGroup; }

		//"include" | "INCLUDE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"include"
		public Keyword getIncludeKeyword_0_0() { return cIncludeKeyword_0_0; }

		//"INCLUDE"
		public Keyword getINCLUDEKeyword_0_1() { return cINCLUDEKeyword_0_1; }

		//("[" local?=("local" | "LOCAL") "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//local?=("local" | "LOCAL")
		public Assignment getLocalAssignment_1_1() { return cLocalAssignment_1_1; }

		//"local" | "LOCAL"
		public Alternatives getLocalAlternatives_1_1_0() { return cLocalAlternatives_1_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_1_1_0_0() { return cLocalLocalKeyword_1_1_0_0; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_1_1_0_1() { return cLocalLOCALKeyword_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//file=STRING
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }

		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_2_0() { return cFileSTRINGTerminalRuleCall_2_0; }
	}

	public class IncludeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIncludeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cINCLUDEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cModelKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cMODELKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//IncludeModel:
		//
		//	("include" | "INCLUDE") ("model" | "MODEL") ID;
		public ParserRule getRule() { return rule; }

		//("include" | "INCLUDE") ("model" | "MODEL") ID
		public Group getGroup() { return cGroup; }

		//"include" | "INCLUDE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"include"
		public Keyword getIncludeKeyword_0_0() { return cIncludeKeyword_0_0; }

		//"INCLUDE"
		public Keyword getINCLUDEKeyword_0_1() { return cINCLUDEKeyword_0_1; }

		//"model" | "MODEL"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"model"
		public Keyword getModelKeyword_1_0() { return cModelKeyword_1_0; }

		//"MODEL"
		public Keyword getMODELKeyword_1_1() { return cMODELKeyword_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class SpecialIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialIdent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTafCfsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDaysInParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWaterYearParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMonthParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCalendarMonthParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrevMonthParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//SpecialIdent:
		//
		//	TafCfs | DaysIn | WaterYear | Month | CalendarMonth | PrevMonth | I;
		public ParserRule getRule() { return rule; }

		//TafCfs | DaysIn | WaterYear | Month | CalendarMonth | PrevMonth | I
		public Alternatives getAlternatives() { return cAlternatives; }

		//TafCfs
		public RuleCall getTafCfsParserRuleCall_0() { return cTafCfsParserRuleCall_0; }

		//DaysIn
		public RuleCall getDaysInParserRuleCall_1() { return cDaysInParserRuleCall_1; }

		//WaterYear
		public RuleCall getWaterYearParserRuleCall_2() { return cWaterYearParserRuleCall_2; }

		//Month
		public RuleCall getMonthParserRuleCall_3() { return cMonthParserRuleCall_3; }

		//CalendarMonth
		public RuleCall getCalendarMonthParserRuleCall_4() { return cCalendarMonthParserRuleCall_4; }

		//PrevMonth
		public RuleCall getPrevMonthParserRuleCall_5() { return cPrevMonthParserRuleCall_5; }

		//I
		public RuleCall getIParserRuleCall_6() { return cIParserRuleCall_6; }
	}

	public class TafCfsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TafCfs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAF_CFSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCF_SAFParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCFS_TAFParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTAF_CFSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TafCfs:
		//
		//	AF_CFS | CF_SAF | CFS_TAF | TAF_CFS;
		public ParserRule getRule() { return rule; }

		//AF_CFS | CF_SAF | CFS_TAF | TAF_CFS
		public Alternatives getAlternatives() { return cAlternatives; }

		//AF_CFS
		public RuleCall getAF_CFSParserRuleCall_0() { return cAF_CFSParserRuleCall_0; }

		//CF_SAF
		public RuleCall getCF_SAFParserRuleCall_1() { return cCF_SAFParserRuleCall_1; }

		//CFS_TAF
		public RuleCall getCFS_TAFParserRuleCall_2() { return cCFS_TAFParserRuleCall_2; }

		//TAF_CFS
		public RuleCall getTAF_CFSParserRuleCall_3() { return cTAF_CFSParserRuleCall_3; }
	}

	public class IElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "I");
		private final Keyword cIKeyword = (Keyword)rule.eContents().get(1);
		
		//I:
		//
		//	"i";
		public ParserRule getRule() { return rule; }

		//"i"
		public Keyword getIKeyword() { return cIKeyword; }
	}

	public class AF_CFSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AF_CFS");
		private final Keyword cAf_cfsKeyword = (Keyword)rule.eContents().get(1);
		
		//AF_CFS:
		//
		//	"af_cfs";
		public ParserRule getRule() { return rule; }

		//"af_cfs"
		public Keyword getAf_cfsKeyword() { return cAf_cfsKeyword; }
	}

	public class CF_SAFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CF_SAF");
		private final Keyword cCfs_afKeyword = (Keyword)rule.eContents().get(1);
		
		//CF_SAF:
		//
		//	"cfs_af";
		public ParserRule getRule() { return rule; }

		//"cfs_af"
		public Keyword getCfs_afKeyword() { return cCfs_afKeyword; }
	}

	public class CFS_TAFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CFS_TAF");
		private final Keyword cCfs_tafKeyword = (Keyword)rule.eContents().get(1);
		
		//CFS_TAF:
		//
		//	"cfs_taf";
		public ParserRule getRule() { return rule; }

		//"cfs_taf"
		public Keyword getCfs_tafKeyword() { return cCfs_tafKeyword; }
	}

	public class TAF_CFSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TAF_CFS");
		private final Keyword cTaf_cfsKeyword = (Keyword)rule.eContents().get(1);
		
		//TAF_CFS:
		//
		//	"taf_cfs";
		public ParserRule getRule() { return rule; }

		//"taf_cfs"
		public Keyword getTaf_cfsKeyword() { return cTaf_cfsKeyword; }
	}

	public class DaysInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DaysIn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDaysinKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDaysinmonthKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//DaysIn:
		//
		//	"daysin" | "daysinmonth";
		public ParserRule getRule() { return rule; }

		//"daysin" | "daysinmonth"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"daysin"
		public Keyword getDaysinKeyword_0() { return cDaysinKeyword_0; }

		//"daysinmonth"
		public Keyword getDaysinmonthKeyword_1() { return cDaysinmonthKeyword_1; }
	}

	public class WaterYearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WaterYear");
		private final Keyword cWateryearKeyword = (Keyword)rule.eContents().get(1);
		
		//WaterYear:
		//
		//	"wateryear";
		public ParserRule getRule() { return rule; }

		//"wateryear"
		public Keyword getWateryearKeyword() { return cWateryearKeyword; }
	}

	public class MonthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Month");
		private final Keyword cMonthKeyword = (Keyword)rule.eContents().get(1);
		
		//Month:
		//
		//	"month";
		public ParserRule getRule() { return rule; }

		//"month"
		public Keyword getMonthKeyword() { return cMonthKeyword; }
	}

	public class CalendarMonthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CalendarMonth");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cJanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFebKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMarKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAprKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMayKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cJunKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cJulKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAugKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSepKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOctKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cNovKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cDecKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//CalendarMonth:
		//
		//	"jan" | "feb" | "mar" | "apr" | "may" | "jun" | "jul" | "aug" | "sep" | "oct" | "nov" | "dec";
		public ParserRule getRule() { return rule; }

		//"jan" | "feb" | "mar" | "apr" | "may" | "jun" | "jul" | "aug" | "sep" | "oct" | "nov" | "dec"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"jan"
		public Keyword getJanKeyword_0() { return cJanKeyword_0; }

		//"feb"
		public Keyword getFebKeyword_1() { return cFebKeyword_1; }

		//"mar"
		public Keyword getMarKeyword_2() { return cMarKeyword_2; }

		//"apr"
		public Keyword getAprKeyword_3() { return cAprKeyword_3; }

		//"may"
		public Keyword getMayKeyword_4() { return cMayKeyword_4; }

		//"jun"
		public Keyword getJunKeyword_5() { return cJunKeyword_5; }

		//"jul"
		public Keyword getJulKeyword_6() { return cJulKeyword_6; }

		//"aug"
		public Keyword getAugKeyword_7() { return cAugKeyword_7; }

		//"sep"
		public Keyword getSepKeyword_8() { return cSepKeyword_8; }

		//"oct"
		public Keyword getOctKeyword_9() { return cOctKeyword_9; }

		//"nov"
		public Keyword getNovKeyword_10() { return cNovKeyword_10; }

		//"dec"
		public Keyword getDecKeyword_11() { return cDecKeyword_11; }
	}

	public class PrevMonthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrevMonth");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPrevjanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrevfebKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPrevmarKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPrevaprKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrevmayKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPrevjunKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPrevjulKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPrevaugKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPrevsepKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPrevoctKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPrevnovKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cPrevdecKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//PrevMonth:
		//
		//	"prevjan" | "prevfeb" | "prevmar" | "prevapr" | "prevmay" | "prevjun" | "prevjul" | "prevaug" | "prevsep" | "prevoct"
		//
		//	| "prevnov" | "prevdec";
		public ParserRule getRule() { return rule; }

		//"prevjan" | "prevfeb" | "prevmar" | "prevapr" | "prevmay" | "prevjun" | "prevjul" | "prevaug" | "prevsep" | "prevoct" |
		//
		//"prevnov" | "prevdec"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"prevjan"
		public Keyword getPrevjanKeyword_0() { return cPrevjanKeyword_0; }

		//"prevfeb"
		public Keyword getPrevfebKeyword_1() { return cPrevfebKeyword_1; }

		//"prevmar"
		public Keyword getPrevmarKeyword_2() { return cPrevmarKeyword_2; }

		//"prevapr"
		public Keyword getPrevaprKeyword_3() { return cPrevaprKeyword_3; }

		//"prevmay"
		public Keyword getPrevmayKeyword_4() { return cPrevmayKeyword_4; }

		//"prevjun"
		public Keyword getPrevjunKeyword_5() { return cPrevjunKeyword_5; }

		//"prevjul"
		public Keyword getPrevjulKeyword_6() { return cPrevjulKeyword_6; }

		//"prevaug"
		public Keyword getPrevaugKeyword_7() { return cPrevaugKeyword_7; }

		//"prevsep"
		public Keyword getPrevsepKeyword_8() { return cPrevsepKeyword_8; }

		//"prevoct"
		public Keyword getPrevoctKeyword_9() { return cPrevoctKeyword_9; }

		//"prevnov"
		public Keyword getPrevnovKeyword_10() { return cPrevnovKeyword_10; }

		//"prevdec"
		public Keyword getPrevdecKeyword_11() { return cPrevdecKeyword_11; }
	}

	public class MultiStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiStep");
		private final Keyword cMKeyword = (Keyword)rule.eContents().get(1);
		
		//MultiStep:
		//
		//	"$m";
		public ParserRule getRule() { return rule; }

		//"$m"
		public Keyword getMKeyword() { return cMKeyword; }
	}

	public class TimeStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeStep");
		private final Keyword cTimestepKeyword = (Keyword)rule.eContents().get(1);
		
		//TimeStep:
		//
		//	"timestep";
		public ParserRule getRule() { return rule; }

		//"timestep"
		public Keyword getTimestepKeyword() { return cTimestepKeyword; }
	}

	public class TimeStepValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeStepValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMONKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDAYKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TimeStepValue:
		//
		//	"1MON" | "1DAY";
		public ParserRule getRule() { return rule; }

		//"1MON" | "1DAY"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"1MON"
		public Keyword getMONKeyword_0() { return cMONKeyword_0; }

		//"1DAY"
		public Keyword getDAYKeyword_1() { return cDAYKeyword_1; }
	}
	
	
	private WreslEvaluatorElements pWreslEvaluator;
	private PatternElements pPattern;
	private DeclarationElements pDeclaration;
	private VariableElements pVariable;
	private StateVariableElements pStateVariable;
	private DecisionVariableElements pDecisionVariable;
	private IfIncItemsElements pIfIncItems;
	private IfTermElements pIfTerm;
	private ElseIfTermElements pElseIfTerm;
	private ElseTermElements pElseTerm;
	private TimeArraySizeElements pTimeArraySize;
	private ObjectiveElements pObjective;
	private WeightItemElements pWeightItem;
	private ExternalDefElements pExternalDef;
	private SvarDefElements pSvarDef;
	private DvarDefElements pDvarDef;
	private ConstDefElements pConstDef;
	private AliasElements pAlias;
	private ExternalElements pExternal;
	private DVarElements pDVar;
	private DVarNonStdElements pDVarNonStd;
	private DVarStdElements pDVarStd;
	private DVarIntegerElements pDVarInteger;
	private DVarIntegerStdElements pDVarIntegerStd;
	private DVarIntegerNonStdElements pDVarIntegerNonStd;
	private SVarElements pSVar;
	private SVarDSSElements pSVarDSS;
	private SVarExpressionElements pSVarExpression;
	private SVarSumElements pSVarSum;
	private SVarTableElements pSVarTable;
	private SVarCaseElements pSVarCase;
	private CaseContentElements pCaseContent;
	private SumContentElements pSumContent;
	private SumHeaderElements pSumHeader;
	private ValueContentElements pValueContent;
	private TableContentElements pTableContent;
	private WhereItemsElements pWhereItems;
	private AssignmentElements pAssignment;
	private TermSimpleElements pTermSimple;
	private LowerAndOrUpperElements pLowerAndOrUpper;
	private UpperLowerElements pUpperLower;
	private LowerUpperElements pLowerUpper;
	private UpperElements pUpper;
	private LowerElements pLower;
	private GoalElements pGoal;
	private GoalCaseElements pGoalCase;
	private GoalCaseContentElements pGoalCaseContent;
	private GoalNoCaseContentElements pGoalNoCaseContent;
	private SubContentElements pSubContent;
	private LhsGtRhsElements pLhsGtRhs;
	private LhsLtRhsElements pLhsLtRhs;
	private PenaltyElements pPenalty;
	private GoalSimpleElements pGoalSimple;
	private ConstraintElements pConstraint;
	private ModelElements pModel;
	private InitialElements pInitial;
	private SequenceElements pSequence;
	private ConditionElements pCondition;
	private LogicalExpressionElements pLogicalExpression;
	private BinaryOpElements pBinaryOp;
	private ConditionalUnaryElements pConditionalUnary;
	private ConditionalNegationElements pConditionalNegation;
	private ConditionalTermElements pConditionalTerm;
	private RelationElements pRelation;
	private ExpressionElements pExpression;
	private AddElements pAdd;
	private MultiplyElements pMultiply;
	private UnaryElements pUnary;
	private NegationElements pNegation;
	private TermElements pTerm;
	private FunctionElements pFunction;
	private ExternalFunctionElements pExternalFunction;
	private MaxFunctionElements pMaxFunction;
	private MinFunctionElements pMinFunction;
	private ModFunctionElements pModFunction;
	private IntFunctionElements pIntFunction;
	private AbsFunctionElements pAbsFunction;
	private PowFunctionElements pPowFunction;
	private LogFunctionElements pLogFunction;
	private LogicalFunctionElements pLogicalFunction;
	private VarModelElements pVarModel;
	private VarModelStepElements pVarModelStep;
	private VarModelIndexElements pVarModelIndex;
	private VarModelIndexStepElements pVarModelIndexStep;
	private RangeFunctionElements pRangeFunction;
	private IdentElements pIdent;
	private NumberElements pNumber;
	private IncludeFileElements pIncludeFile;
	private IncludeModelElements pIncludeModel;
	private SpecialIdentElements pSpecialIdent;
	private TafCfsElements pTafCfs;
	private IElements pI;
	private AF_CFSElements pAF_CFS;
	private CF_SAFElements pCF_SAF;
	private CFS_TAFElements pCFS_TAF;
	private TAF_CFSElements pTAF_CFS;
	private DaysInElements pDaysIn;
	private WaterYearElements pWaterYear;
	private MonthElements pMonth;
	private CalendarMonthElements pCalendarMonth;
	private PrevMonthElements pPrevMonth;
	private MultiStepElements pMultiStep;
	private TimeStepElements pTimeStep;
	private TimeStepValueElements pTimeStepValue;
	private TerminalRule tIf;
	private TerminalRule tElseIf;
	private TerminalRule tElse;
	private TerminalRule tRANGE;
	private TerminalRule tMIN;
	private TerminalRule tMAX;
	private TerminalRule tMOD;
	private TerminalRule tINTFUNC;
	private TerminalRule tABS;
	private TerminalRule tPOW;
	private TerminalRule tLOG;
	private TerminalRule tFLOAT;
	private TerminalRule tAND;
	private TerminalRule tOR;
	private TerminalRule tNOT;
	private TerminalRule tALWAYS;
	private TerminalRule tORDER;
	private TerminalRule tSTRING;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public WreslEditorGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("gov.ca.dwr.wresl.xtext.editor.WreslEditor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//WreslEvaluator:
	//
	//	(pattern+=Pattern | ifincitem+=IfIncItems)+ | initial=Initial? sequence+=Sequence+ model+=Model+ | Declaration;
	public WreslEvaluatorElements getWreslEvaluatorAccess() {
		return (pWreslEvaluator != null) ? pWreslEvaluator : (pWreslEvaluator = new WreslEvaluatorElements());
	}
	
	public ParserRule getWreslEvaluatorRule() {
		return getWreslEvaluatorAccess().getRule();
	}

	//Pattern:
	//
	//	Variable | IncludeFile | IncludeModel | Goal | Objective;
	public PatternElements getPatternAccess() {
		return (pPattern != null) ? pPattern : (pPattern = new PatternElements());
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//Declaration:
	//
	//	"Declare" "{" name=ID "}";
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Variable:
	//
	//	StateVariable | DecisionVariable | ExternalDef;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//StateVariable:
	//
	//	SvarDef | ConstDef;
	public StateVariableElements getStateVariableAccess() {
		return (pStateVariable != null) ? pStateVariable : (pStateVariable = new StateVariableElements());
	}
	
	public ParserRule getStateVariableRule() {
		return getStateVariableAccess().getRule();
	}

	//DecisionVariable:
	//
	//	DvarDef | Alias;
	public DecisionVariableElements getDecisionVariableAccess() {
		return (pDecisionVariable != null) ? pDecisionVariable : (pDecisionVariable = new DecisionVariableElements());
	}
	
	public ParserRule getDecisionVariableRule() {
		return getDecisionVariableAccess().getRule();
	}

	//IfIncItems:
	//
	//	IfTerm elseifterm=ElseIfTerm? elseterm=ElseTerm?;
	public IfIncItemsElements getIfIncItemsAccess() {
		return (pIfIncItems != null) ? pIfIncItems : (pIfIncItems = new IfIncItemsElements());
	}
	
	public ParserRule getIfIncItemsRule() {
		return getIfIncItemsAccess().getRule();
	}

	//IfTerm:
	//
	//	If logical=LogicalExpression "{" pattern+=Pattern+ "}";
	public IfTermElements getIfTermAccess() {
		return (pIfTerm != null) ? pIfTerm : (pIfTerm = new IfTermElements());
	}
	
	public ParserRule getIfTermRule() {
		return getIfTermAccess().getRule();
	}

	//ElseIfTerm:
	//
	//	(ElseIf logical+=LogicalExpression "{" pattern+=Pattern+ "}")+;
	public ElseIfTermElements getElseIfTermAccess() {
		return (pElseIfTerm != null) ? pElseIfTerm : (pElseIfTerm = new ElseIfTermElements());
	}
	
	public ParserRule getElseIfTermRule() {
		return getElseIfTermAccess().getRule();
	}

	//ElseTerm:
	//
	//	Else "{" pattern+=Pattern+ "}";
	public ElseTermElements getElseTermAccess() {
		return (pElseTerm != null) ? pElseTerm : (pElseTerm = new ElseTermElements());
	}
	
	public ParserRule getElseTermRule() {
		return getElseTermAccess().getRule();
	}

	//TimeArraySize:
	//
	//	"(" name=[Declaration] ")";
	public TimeArraySizeElements getTimeArraySizeAccess() {
		return (pTimeArraySize != null) ? pTimeArraySize : (pTimeArraySize = new TimeArraySizeElements());
	}
	
	public ParserRule getTimeArraySizeRule() {
		return getTimeArraySizeAccess().getRule();
	}

	//Objective:
	//
	//	("objective" | "OBJECTIVE") ("[" local?=("local" | "LOCAL") "]")? name=ID "="? "{" weights+=WeightItem+ "}";
	public ObjectiveElements getObjectiveAccess() {
		return (pObjective != null) ? pObjective : (pObjective = new ObjectiveElements());
	}
	
	public ParserRule getObjectiveRule() {
		return getObjectiveAccess().getRule();
	}

	//WeightItem:
	//
	//	"[" ref=[Declaration] ta=TimeArraySize? "," expression=Expression "]" ","?;
	public WeightItemElements getWeightItemAccess() {
		return (pWeightItem != null) ? pWeightItem : (pWeightItem = new WeightItemElements());
	}
	
	public ParserRule getWeightItemRule() {
		return getWeightItemAccess().getRule();
	}

	//ExternalDef:
	//
	//	("define" | "DEFINE") ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=External "}";
	public ExternalDefElements getExternalDefAccess() {
		return (pExternalDef != null) ? pExternalDef : (pExternalDef = new ExternalDefElements());
	}
	
	public ParserRule getExternalDefRule() {
		return getExternalDefAccess().getRule();
	}

	//SvarDef:
	//
	//	("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=SVar
	//
	//	"}" | ("svar" | "SVAR" | "Svar") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{"
	//
	//	definition=SVar "}";
	public SvarDefElements getSvarDefAccess() {
		return (pSvarDef != null) ? pSvarDef : (pSvarDef = new SvarDefElements());
	}
	
	public ParserRule getSvarDefRule() {
		return getSvarDefAccess().getRule();
	}

	//DvarDef:
	//
	//	("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=(DVar
	//
	//	| DVarInteger) "}" | ("dvar" | "DVAR" | "Dvar") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")?
	//
	//	ref=[Declaration] "{" definition=(DVar | DVarInteger) "}";
	public DvarDefElements getDvarDefAccess() {
		return (pDvarDef != null) ? pDvarDef : (pDvarDef = new DvarDefElements());
	}
	
	public ParserRule getDvarDefRule() {
		return getDvarDefAccess().getRule();
	}

	//ConstDef:
	//
	//	("const" | "CONST" | "Const") ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" definition=Number "}";
	public ConstDefElements getConstDefAccess() {
		return (pConstDef != null) ? pConstDef : (pConstDef = new ConstDefElements());
	}
	
	public ParserRule getConstDefRule() {
		return getConstDefAccess().getRule();
	}

	////name=[SVar|ID] to be changed to reference after scoping is resolved across files
	// Alias:
	//
	//	("define" | "DEFINE") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? ref=[Declaration] "{" ("alias" |
	//
	//	"ALIAS") expression=Expression (("kind" | "KIND") kind=STRING)? (("units" | "UNITS") units=STRING)? "}";
	public AliasElements getAliasAccess() {
		return (pAlias != null) ? pAlias : (pAlias = new AliasElements());
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}

	//External:
	//
	//	("external" | "EXTERNAL") (name=ID (".dll" | ".DLL") | {External} ("f90" | "F90"));
	public ExternalElements getExternalAccess() {
		return (pExternal != null) ? pExternal : (pExternal = new ExternalElements());
	}
	
	public ParserRule getExternalRule() {
		return getExternalAccess().getRule();
	}

	//DVar:
	//
	//	DVarStd | DVarNonStd;
	public DVarElements getDVarAccess() {
		return (pDVar != null) ? pDVar : (pDVar = new DVarElements());
	}
	
	public ParserRule getDVarRule() {
		return getDVarAccess().getRule();
	}

	//DVarNonStd:
	//
	//	lowerUpper=LowerAndOrUpper ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING;
	public DVarNonStdElements getDVarNonStdAccess() {
		return (pDVarNonStd != null) ? pDVarNonStd : (pDVarNonStd = new DVarNonStdElements());
	}
	
	public ParserRule getDVarNonStdRule() {
		return getDVarNonStdAccess().getRule();
	}

	//DVarStd:
	//
	//	("std" | "STD") ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING;
	public DVarStdElements getDVarStdAccess() {
		return (pDVarStd != null) ? pDVarStd : (pDVarStd = new DVarStdElements());
	}
	
	public ParserRule getDVarStdRule() {
		return getDVarStdAccess().getRule();
	}

	//DVarInteger:
	//
	//	DVarIntegerStd | DVarIntegerNonStd;
	public DVarIntegerElements getDVarIntegerAccess() {
		return (pDVarInteger != null) ? pDVarInteger : (pDVarInteger = new DVarIntegerElements());
	}
	
	public ParserRule getDVarIntegerRule() {
		return getDVarIntegerAccess().getRule();
	}

	//DVarIntegerStd:
	//
	//	("integer" | "INTEGER") ("std" | "STD") ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING;
	public DVarIntegerStdElements getDVarIntegerStdAccess() {
		return (pDVarIntegerStd != null) ? pDVarIntegerStd : (pDVarIntegerStd = new DVarIntegerStdElements());
	}
	
	public ParserRule getDVarIntegerStdRule() {
		return getDVarIntegerStdAccess().getRule();
	}

	//DVarIntegerNonStd:
	//
	//	("integer" | "INTEGER") LowerAndOrUpper ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING;
	public DVarIntegerNonStdElements getDVarIntegerNonStdAccess() {
		return (pDVarIntegerNonStd != null) ? pDVarIntegerNonStd : (pDVarIntegerNonStd = new DVarIntegerNonStdElements());
	}
	
	public ParserRule getDVarIntegerNonStdRule() {
		return getDVarIntegerNonStdAccess().getRule();
	}

	//SVar:
	//
	//	SVarDSS | SVarExpression | SVarSum | SVarTable | SVarCase;
	public SVarElements getSVarAccess() {
		return (pSVar != null) ? pSVar : (pSVar = new SVarElements());
	}
	
	public ParserRule getSVarRule() {
		return getSVarAccess().getRule();
	}

	//SVarDSS:
	//
	//	("timeseries" | "TIMESERIES") bPart=STRING? ("kind" | "KIND") kind=STRING ("units" | "UNITS") units=STRING
	//
	//	(("convert" | "CONVERT") convert=STRING)?;
	public SVarDSSElements getSVarDSSAccess() {
		return (pSVarDSS != null) ? pSVarDSS : (pSVarDSS = new SVarDSSElements());
	}
	
	public ParserRule getSVarDSSRule() {
		return getSVarDSSAccess().getRule();
	}

	//SVarExpression:
	//
	//	("value" | "VALUE") expression=Expression;
	public SVarExpressionElements getSVarExpressionAccess() {
		return (pSVarExpression != null) ? pSVarExpression : (pSVarExpression = new SVarExpressionElements());
	}
	
	public ParserRule getSVarExpressionRule() {
		return getSVarExpressionAccess().getRule();
	}

	//SVarSum:
	//
	//	sumContent=SumContent;
	public SVarSumElements getSVarSumAccess() {
		return (pSVarSum != null) ? pSVarSum : (pSVarSum = new SVarSumElements());
	}
	
	public ParserRule getSVarSumRule() {
		return getSVarSumAccess().getRule();
	}

	//SVarTable:
	//
	//	tableContent=TableContent;
	public SVarTableElements getSVarTableAccess() {
		return (pSVarTable != null) ? pSVarTable : (pSVarTable = new SVarTableElements());
	}
	
	public ParserRule getSVarTableRule() {
		return getSVarTableAccess().getRule();
	}

	//SVarCase:
	//
	//	caseContent+=CaseContent+;
	public SVarCaseElements getSVarCaseAccess() {
		return (pSVarCase != null) ? pSVarCase : (pSVarCase = new SVarCaseElements());
	}
	
	public ParserRule getSVarCaseRule() {
		return getSVarCaseAccess().getRule();
	}

	//CaseContent:
	//
	//	("case" | "CASE") caseName=(ID | SpecialIdent) "{" condition=Condition (content=TableContent | content=ValueContent |
	//
	//	content=SumContent) "}";
	public CaseContentElements getCaseContentAccess() {
		return (pCaseContent != null) ? pCaseContent : (pCaseContent = new CaseContentElements());
	}
	
	public ParserRule getCaseContentRule() {
		return getCaseContentAccess().getRule();
	}

	//SumContent:
	//
	//	("sum" | "SUM") header=SumHeader expression=Expression;
	public SumContentElements getSumContentAccess() {
		return (pSumContent != null) ? pSumContent : (pSumContent = new SumContentElements());
	}
	
	public ParserRule getSumContentRule() {
		return getSumContentAccess().getRule();
	}

	//SumHeader:
	//
	//	"(" "i=" expression1=Expression "," expression2=Expression ("," "-"? INT)? ")";
	public SumHeaderElements getSumHeaderAccess() {
		return (pSumHeader != null) ? pSumHeader : (pSumHeader = new SumHeaderElements());
	}
	
	public ParserRule getSumHeaderRule() {
		return getSumHeaderAccess().getRule();
	}

	//ValueContent:
	//
	//	("value" | "VALUE") expression=Expression;
	public ValueContentElements getValueContentAccess() {
		return (pValueContent != null) ? pValueContent : (pValueContent = new ValueContentElements());
	}
	
	public ParserRule getValueContentRule() {
		return getValueContentAccess().getRule();
	}

	//TableContent:
	//
	//	("select" | "SELECT") tableName=(ID | SpecialIdent) ("from" | "FROM") from=(ID | SpecialIdent) (("given" | "GIVEN")
	//
	//	given=Assignment ("use" | "USE") use=ID)? (("where" | "WHERE") where=WhereItems)?;
	public TableContentElements getTableContentAccess() {
		return (pTableContent != null) ? pTableContent : (pTableContent = new TableContentElements());
	}
	
	public ParserRule getTableContentRule() {
		return getTableContentAccess().getRule();
	}

	//WhereItems:
	//
	//	assignment+=Assignment ("," assignment+=Assignment)*;
	public WhereItemsElements getWhereItemsAccess() {
		return (pWhereItems != null) ? pWhereItems : (pWhereItems = new WhereItemsElements());
	}
	
	public ParserRule getWhereItemsRule() {
		return getWhereItemsAccess().getRule();
	}

	//Assignment:
	//
	//	term=TermSimple "=" expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//TermSimple:
	//
	//	ID | Number | Function | SpecialIdent;
	public TermSimpleElements getTermSimpleAccess() {
		return (pTermSimple != null) ? pTermSimple : (pTermSimple = new TermSimpleElements());
	}
	
	public ParserRule getTermSimpleRule() {
		return getTermSimpleAccess().getRule();
	}

	//LowerAndOrUpper:
	//
	//	lowerUpper | upperLower;
	public LowerAndOrUpperElements getLowerAndOrUpperAccess() {
		return (pLowerAndOrUpper != null) ? pLowerAndOrUpper : (pLowerAndOrUpper = new LowerAndOrUpperElements());
	}
	
	public ParserRule getLowerAndOrUpperRule() {
		return getLowerAndOrUpperAccess().getRule();
	}

	//upperLower:
	//
	//	upper=Upper lower=Lower?;
	public UpperLowerElements getUpperLowerAccess() {
		return (pUpperLower != null) ? pUpperLower : (pUpperLower = new UpperLowerElements());
	}
	
	public ParserRule getUpperLowerRule() {
		return getUpperLowerAccess().getRule();
	}

	//lowerUpper:
	//
	//	lower=Lower upper=Upper?;
	public LowerUpperElements getLowerUpperAccess() {
		return (pLowerUpper != null) ? pLowerUpper : (pLowerUpper = new LowerUpperElements());
	}
	
	public ParserRule getLowerUpperRule() {
		return getLowerUpperAccess().getRule();
	}

	//Upper:
	//
	//	("upper" | "UPPER") ({Upper} ("unbounded" | "UNBOUNDED") | expression=Expression);
	public UpperElements getUpperAccess() {
		return (pUpper != null) ? pUpper : (pUpper = new UpperElements());
	}
	
	public ParserRule getUpperRule() {
		return getUpperAccess().getRule();
	}

	//Lower:
	//
	//	("lower" | "LOWER") ({Lower} ("unbounded" | "UNBOUNDED") | expression=Expression);
	public LowerElements getLowerAccess() {
		return (pLower != null) ? pLower : (pLower = new LowerElements());
	}
	
	public ParserRule getLowerRule() {
		return getLowerAccess().getRule();
	}

	//Goal:
	//
	//	("goal" | "GOAL") ta=TimeArraySize? ("[" local?=("local" | "LOCAL") "]")? name=ID "{" definition=(GoalSimple |
	//
	//	GoalCase) "}";
	public GoalElements getGoalAccess() {
		return (pGoal != null) ? pGoal : (pGoal = new GoalElements());
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//GoalCase:
	//
	//	("lhs" | "LHS") lhs=Expression (content=GoalNoCaseContent | caseContent+=GoalCaseContent+);
	public GoalCaseElements getGoalCaseAccess() {
		return (pGoalCase != null) ? pGoalCase : (pGoalCase = new GoalCaseElements());
	}
	
	public ParserRule getGoalCaseRule() {
		return getGoalCaseAccess().getRule();
	}

	//GoalCaseContent:
	//
	//	("case" | "CASE") caseName=(ID | SpecialIdent) "{" condition=Condition ("rhs" | "RHS") rhs=Expression
	//
	//	subContent=SubContent? "}";
	public GoalCaseContentElements getGoalCaseContentAccess() {
		return (pGoalCaseContent != null) ? pGoalCaseContent : (pGoalCaseContent = new GoalCaseContentElements());
	}
	
	public ParserRule getGoalCaseContentRule() {
		return getGoalCaseContentAccess().getRule();
	}

	//GoalNoCaseContent:
	//
	//	("rhs" | "RHS") rhs=Expression subContent=SubContent?;
	public GoalNoCaseContentElements getGoalNoCaseContentAccess() {
		return (pGoalNoCaseContent != null) ? pGoalNoCaseContent : (pGoalNoCaseContent = new GoalNoCaseContentElements());
	}
	
	public ParserRule getGoalNoCaseContentRule() {
		return getGoalNoCaseContentAccess().getRule();
	}

	////FIXME: replace with unordered groups
	// SubContent:
	//
	//	gt=LhsGtRhs lt=LhsLtRhs? | lt=LhsLtRhs gt=LhsGtRhs?;
	public SubContentElements getSubContentAccess() {
		return (pSubContent != null) ? pSubContent : (pSubContent = new SubContentElements());
	}
	
	public ParserRule getSubContentRule() {
		return getSubContentAccess().getRule();
	}

	//LhsGtRhs:
	//
	//	("lhs" | "LHS") ">" ("rhs" | "RHS") ({LhsGtRhs} ("constrain" | "CONSTRAIN") | penalty=Penalty);
	public LhsGtRhsElements getLhsGtRhsAccess() {
		return (pLhsGtRhs != null) ? pLhsGtRhs : (pLhsGtRhs = new LhsGtRhsElements());
	}
	
	public ParserRule getLhsGtRhsRule() {
		return getLhsGtRhsAccess().getRule();
	}

	//LhsLtRhs:
	//
	//	("lhs" | "LHS") "<" ("rhs" | "RHS") ({LhsLtRhs} ("constrain" | "CONSTRAIN") | penalty=Penalty);
	public LhsLtRhsElements getLhsLtRhsAccess() {
		return (pLhsLtRhs != null) ? pLhsLtRhs : (pLhsLtRhs = new LhsLtRhsElements());
	}
	
	public ParserRule getLhsLtRhsRule() {
		return getLhsLtRhsAccess().getRule();
	}

	//Penalty:
	//
	//	("penalty" | "PENALTY") expression=Expression;
	public PenaltyElements getPenaltyAccess() {
		return (pPenalty != null) ? pPenalty : (pPenalty = new PenaltyElements());
	}
	
	public ParserRule getPenaltyRule() {
		return getPenaltyAccess().getRule();
	}

	//GoalSimple:
	//
	//	constraint=Constraint;
	public GoalSimpleElements getGoalSimpleAccess() {
		return (pGoalSimple != null) ? pGoalSimple : (pGoalSimple = new GoalSimpleElements());
	}
	
	public ParserRule getGoalSimpleRule() {
		return getGoalSimpleAccess().getRule();
	}

	//Constraint:
	//
	//	lhs=Expression operator=("<" | ">" | "=") rhs=Expression;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//Model:
	//
	//	("model" | "MODEL") name=ID "{" (pattern+=Pattern | ifincitems+=IfIncItems)+ "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Initial:
	//
	//	("initial" | "Initial" | "INITIAL") "{" pattern+=Pattern+ "}";
	public InitialElements getInitialAccess() {
		return (pInitial != null) ? pInitial : (pInitial = new InitialElements());
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}

	//Sequence:
	//
	//	("sequence" | "SEQUENCE") name=ID "{" ("model" | "MODEL") model=[Model] condition=Condition? (ORDER order=INT)?
	//
	//	(TimeStep TimeStepValue)? "}";
	public SequenceElements getSequenceAccess() {
		return (pSequence != null) ? pSequence : (pSequence = new SequenceElements());
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//Condition:
	//
	//	("condition" | "CONDITION") (logical=LogicalExpression | {Condition} ALWAYS);
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//LogicalExpression:
	//
	//	c1=ConditionalUnary (BinaryOp c2+=ConditionalUnary)*;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return (pLogicalExpression != null) ? pLogicalExpression : (pLogicalExpression = new LogicalExpressionElements());
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//BinaryOp:
	//
	//	OR | AND;
	public BinaryOpElements getBinaryOpAccess() {
		return (pBinaryOp != null) ? pBinaryOp : (pBinaryOp = new BinaryOpElements());
	}
	
	public ParserRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}

	//ConditionalUnary:
	//
	//	ConditionalNegation? ConditionalTerm;
	public ConditionalUnaryElements getConditionalUnaryAccess() {
		return (pConditionalUnary != null) ? pConditionalUnary : (pConditionalUnary = new ConditionalUnaryElements());
	}
	
	public ParserRule getConditionalUnaryRule() {
		return getConditionalUnaryAccess().getRule();
	}

	//ConditionalNegation:
	//
	//	NOT;
	public ConditionalNegationElements getConditionalNegationAccess() {
		return (pConditionalNegation != null) ? pConditionalNegation : (pConditionalNegation = new ConditionalNegationElements());
	}
	
	public ParserRule getConditionalNegationRule() {
		return getConditionalNegationAccess().getRule();
	}

	//ConditionalTerm:
	//
	//	e1=Expression Relation e2=Expression | LogicalFunction | => ("(" LogicalExpression ")");
	public ConditionalTermElements getConditionalTermAccess() {
		return (pConditionalTerm != null) ? pConditionalTerm : (pConditionalTerm = new ConditionalTermElements());
	}
	
	public ParserRule getConditionalTermRule() {
		return getConditionalTermAccess().getRule();
	}

	//Relation:
	//
	//	">" | "<" | ">=" | "<=" | "==" | "/=";
	public RelationElements getRelationAccess() {
		return (pRelation != null) ? pRelation : (pRelation = new RelationElements());
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//Expression:
	//
	//	Add;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Add:
	//
	//	m1=Multiply (("+" | "-") m2+=Multiply)*;
	public AddElements getAddAccess() {
		return (pAdd != null) ? pAdd : (pAdd = new AddElements());
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}

	//Multiply:
	//
	//	u1=Unary (("*" | "/") u2+=Unary)*;
	public MultiplyElements getMultiplyAccess() {
		return (pMultiply != null) ? pMultiply : (pMultiply = new MultiplyElements());
	}
	
	public ParserRule getMultiplyRule() {
		return getMultiplyAccess().getRule();
	}

	//Unary:
	//
	//	("+" | Negation)? Term;
	public UnaryElements getUnaryAccess() {
		return (pUnary != null) ? pUnary : (pUnary = new UnaryElements());
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}

	//Negation:
	//
	//	"-";
	public NegationElements getNegationAccess() {
		return (pNegation != null) ? pNegation : (pNegation = new NegationElements());
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//Term:
	//
	//	ref=[Declaration] | n=Number | f=Function | "(" e=Expression ")" | s=SpecialIdent | MultiStep;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Function:
	//
	//	ExternalFunction | MaxFunction | MinFunction | "(" SumContent ")" | ModFunction | IntFunction | AbsFunction |
	//
	//	PowFunction | LogFunction | VarModel | VarModelStep | VarModelIndex | VarModelIndexStep;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//ExternalFunction:
	//
	//	(ref=[Declaration] | TafCfs | Month) "(" e1=Expression ("," e2+=Expression)* ")";
	public ExternalFunctionElements getExternalFunctionAccess() {
		return (pExternalFunction != null) ? pExternalFunction : (pExternalFunction = new ExternalFunctionElements());
	}
	
	public ParserRule getExternalFunctionRule() {
		return getExternalFunctionAccess().getRule();
	}

	//MaxFunction:
	//
	//	MAX "(" e1=Expression ("," e2+=Expression)* ")";
	public MaxFunctionElements getMaxFunctionAccess() {
		return (pMaxFunction != null) ? pMaxFunction : (pMaxFunction = new MaxFunctionElements());
	}
	
	public ParserRule getMaxFunctionRule() {
		return getMaxFunctionAccess().getRule();
	}

	//MinFunction:
	//
	//	MIN "(" e1=Expression ("," e2+=Expression)* ")";
	public MinFunctionElements getMinFunctionAccess() {
		return (pMinFunction != null) ? pMinFunction : (pMinFunction = new MinFunctionElements());
	}
	
	public ParserRule getMinFunctionRule() {
		return getMinFunctionAccess().getRule();
	}

	//ModFunction:
	//
	//	MOD "(" e1=Expression "," e2=Expression ")";
	public ModFunctionElements getModFunctionAccess() {
		return (pModFunction != null) ? pModFunction : (pModFunction = new ModFunctionElements());
	}
	
	public ParserRule getModFunctionRule() {
		return getModFunctionAccess().getRule();
	}

	//IntFunction:
	//
	//	INTFUNC "(" e=Expression ")";
	public IntFunctionElements getIntFunctionAccess() {
		return (pIntFunction != null) ? pIntFunction : (pIntFunction = new IntFunctionElements());
	}
	
	public ParserRule getIntFunctionRule() {
		return getIntFunctionAccess().getRule();
	}

	//AbsFunction:
	//
	//	ABS "(" e=Expression ")";
	public AbsFunctionElements getAbsFunctionAccess() {
		return (pAbsFunction != null) ? pAbsFunction : (pAbsFunction = new AbsFunctionElements());
	}
	
	public ParserRule getAbsFunctionRule() {
		return getAbsFunctionAccess().getRule();
	}

	//PowFunction:
	//
	//	POW "(" e1=Expression "," e2=Expression ")";
	public PowFunctionElements getPowFunctionAccess() {
		return (pPowFunction != null) ? pPowFunction : (pPowFunction = new PowFunctionElements());
	}
	
	public ParserRule getPowFunctionRule() {
		return getPowFunctionAccess().getRule();
	}

	//LogFunction:
	//
	//	LOG "(" e=Expression ")";
	public LogFunctionElements getLogFunctionAccess() {
		return (pLogFunction != null) ? pLogFunction : (pLogFunction = new LogFunctionElements());
	}
	
	public ParserRule getLogFunctionRule() {
		return getLogFunctionAccess().getRule();
	}

	//LogicalFunction:
	//
	//	RangeFunction;
	public LogicalFunctionElements getLogicalFunctionAccess() {
		return (pLogicalFunction != null) ? pLogicalFunction : (pLogicalFunction = new LogicalFunctionElements());
	}
	
	public ParserRule getLogicalFunctionRule() {
		return getLogicalFunctionAccess().getRule();
	}

	//VarModel:
	//
	//	ref1=[Declaration] "[" ref2=[Model] "]";
	public VarModelElements getVarModelAccess() {
		return (pVarModel != null) ? pVarModel : (pVarModel = new VarModelElements());
	}
	
	public ParserRule getVarModelRule() {
		return getVarModelAccess().getRule();
	}

	//VarModelStep:
	//
	//	ref1=[Declaration] "[" ref2=[Model] "]" "(" e=Expression ")";
	public VarModelStepElements getVarModelStepAccess() {
		return (pVarModelStep != null) ? pVarModelStep : (pVarModelStep = new VarModelStepElements());
	}
	
	public ParserRule getVarModelStepRule() {
		return getVarModelStepAccess().getRule();
	}

	//VarModelIndex:
	//
	//	ref1=[Declaration] "[" "-" INT "]";
	public VarModelIndexElements getVarModelIndexAccess() {
		return (pVarModelIndex != null) ? pVarModelIndex : (pVarModelIndex = new VarModelIndexElements());
	}
	
	public ParserRule getVarModelIndexRule() {
		return getVarModelIndexAccess().getRule();
	}

	//VarModelIndexStep:
	//
	//	ref1=[Declaration] "[" "-" INT "]" "(" e=Expression ")";
	public VarModelIndexStepElements getVarModelIndexStepAccess() {
		return (pVarModelIndexStep != null) ? pVarModelIndexStep : (pVarModelIndexStep = new VarModelIndexStepElements());
	}
	
	public ParserRule getVarModelIndexStepRule() {
		return getVarModelIndexStepAccess().getRule();
	}

	//RangeFunction:
	//
	//	RANGE "(" (ID | Month | WaterYear) "," (ID | CalendarMonth | PrevMonth) "," (ID | CalendarMonth | PrevMonth) ")";
	public RangeFunctionElements getRangeFunctionAccess() {
		return (pRangeFunction != null) ? pRangeFunction : (pRangeFunction = new RangeFunctionElements());
	}
	
	public ParserRule getRangeFunctionRule() {
		return getRangeFunctionAccess().getRule();
	}

	//Ident:
	//
	//	name=ID;
	public IdentElements getIdentAccess() {
		return (pIdent != null) ? pIdent : (pIdent = new IdentElements());
	}
	
	public ParserRule getIdentRule() {
		return getIdentAccess().getRule();
	}

	//Number:
	//
	//	INT | FLOAT;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//IncludeFile:
	//
	//	("include" | "INCLUDE") ("[" local?=("local" | "LOCAL") "]")? file=STRING;
	public IncludeFileElements getIncludeFileAccess() {
		return (pIncludeFile != null) ? pIncludeFile : (pIncludeFile = new IncludeFileElements());
	}
	
	public ParserRule getIncludeFileRule() {
		return getIncludeFileAccess().getRule();
	}

	//IncludeModel:
	//
	//	("include" | "INCLUDE") ("model" | "MODEL") ID;
	public IncludeModelElements getIncludeModelAccess() {
		return (pIncludeModel != null) ? pIncludeModel : (pIncludeModel = new IncludeModelElements());
	}
	
	public ParserRule getIncludeModelRule() {
		return getIncludeModelAccess().getRule();
	}

	//SpecialIdent:
	//
	//	TafCfs | DaysIn | WaterYear | Month | CalendarMonth | PrevMonth | I;
	public SpecialIdentElements getSpecialIdentAccess() {
		return (pSpecialIdent != null) ? pSpecialIdent : (pSpecialIdent = new SpecialIdentElements());
	}
	
	public ParserRule getSpecialIdentRule() {
		return getSpecialIdentAccess().getRule();
	}

	//TafCfs:
	//
	//	AF_CFS | CF_SAF | CFS_TAF | TAF_CFS;
	public TafCfsElements getTafCfsAccess() {
		return (pTafCfs != null) ? pTafCfs : (pTafCfs = new TafCfsElements());
	}
	
	public ParserRule getTafCfsRule() {
		return getTafCfsAccess().getRule();
	}

	//I:
	//
	//	"i";
	public IElements getIAccess() {
		return (pI != null) ? pI : (pI = new IElements());
	}
	
	public ParserRule getIRule() {
		return getIAccess().getRule();
	}

	//AF_CFS:
	//
	//	"af_cfs";
	public AF_CFSElements getAF_CFSAccess() {
		return (pAF_CFS != null) ? pAF_CFS : (pAF_CFS = new AF_CFSElements());
	}
	
	public ParserRule getAF_CFSRule() {
		return getAF_CFSAccess().getRule();
	}

	//CF_SAF:
	//
	//	"cfs_af";
	public CF_SAFElements getCF_SAFAccess() {
		return (pCF_SAF != null) ? pCF_SAF : (pCF_SAF = new CF_SAFElements());
	}
	
	public ParserRule getCF_SAFRule() {
		return getCF_SAFAccess().getRule();
	}

	//CFS_TAF:
	//
	//	"cfs_taf";
	public CFS_TAFElements getCFS_TAFAccess() {
		return (pCFS_TAF != null) ? pCFS_TAF : (pCFS_TAF = new CFS_TAFElements());
	}
	
	public ParserRule getCFS_TAFRule() {
		return getCFS_TAFAccess().getRule();
	}

	//TAF_CFS:
	//
	//	"taf_cfs";
	public TAF_CFSElements getTAF_CFSAccess() {
		return (pTAF_CFS != null) ? pTAF_CFS : (pTAF_CFS = new TAF_CFSElements());
	}
	
	public ParserRule getTAF_CFSRule() {
		return getTAF_CFSAccess().getRule();
	}

	//DaysIn:
	//
	//	"daysin" | "daysinmonth";
	public DaysInElements getDaysInAccess() {
		return (pDaysIn != null) ? pDaysIn : (pDaysIn = new DaysInElements());
	}
	
	public ParserRule getDaysInRule() {
		return getDaysInAccess().getRule();
	}

	//WaterYear:
	//
	//	"wateryear";
	public WaterYearElements getWaterYearAccess() {
		return (pWaterYear != null) ? pWaterYear : (pWaterYear = new WaterYearElements());
	}
	
	public ParserRule getWaterYearRule() {
		return getWaterYearAccess().getRule();
	}

	//Month:
	//
	//	"month";
	public MonthElements getMonthAccess() {
		return (pMonth != null) ? pMonth : (pMonth = new MonthElements());
	}
	
	public ParserRule getMonthRule() {
		return getMonthAccess().getRule();
	}

	//CalendarMonth:
	//
	//	"jan" | "feb" | "mar" | "apr" | "may" | "jun" | "jul" | "aug" | "sep" | "oct" | "nov" | "dec";
	public CalendarMonthElements getCalendarMonthAccess() {
		return (pCalendarMonth != null) ? pCalendarMonth : (pCalendarMonth = new CalendarMonthElements());
	}
	
	public ParserRule getCalendarMonthRule() {
		return getCalendarMonthAccess().getRule();
	}

	//PrevMonth:
	//
	//	"prevjan" | "prevfeb" | "prevmar" | "prevapr" | "prevmay" | "prevjun" | "prevjul" | "prevaug" | "prevsep" | "prevoct"
	//
	//	| "prevnov" | "prevdec";
	public PrevMonthElements getPrevMonthAccess() {
		return (pPrevMonth != null) ? pPrevMonth : (pPrevMonth = new PrevMonthElements());
	}
	
	public ParserRule getPrevMonthRule() {
		return getPrevMonthAccess().getRule();
	}

	//MultiStep:
	//
	//	"$m";
	public MultiStepElements getMultiStepAccess() {
		return (pMultiStep != null) ? pMultiStep : (pMultiStep = new MultiStepElements());
	}
	
	public ParserRule getMultiStepRule() {
		return getMultiStepAccess().getRule();
	}

	//TimeStep:
	//
	//	"timestep";
	public TimeStepElements getTimeStepAccess() {
		return (pTimeStep != null) ? pTimeStep : (pTimeStep = new TimeStepElements());
	}
	
	public ParserRule getTimeStepRule() {
		return getTimeStepAccess().getRule();
	}

	//TimeStepValue:
	//
	//	"1MON" | "1DAY";
	public TimeStepValueElements getTimeStepValueAccess() {
		return (pTimeStepValue != null) ? pTimeStepValue : (pTimeStepValue = new TimeStepValueElements());
	}
	
	public ParserRule getTimeStepValueRule() {
		return getTimeStepValueAccess().getRule();
	}

	//terminal If:
	//
	//	"If" | "IF" | "if";
	public TerminalRule getIfRule() {
		return (tIf != null) ? tIf : (tIf = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "If"));
	} 

	//terminal ElseIf:
	//
	//	"Elseif" | "ELSEIF" | "elseif" | "ElseIf";
	public TerminalRule getElseIfRule() {
		return (tElseIf != null) ? tElseIf : (tElseIf = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ElseIf"));
	} 

	//terminal Else:
	//
	//	"Else" | "ELSE" | "else";
	public TerminalRule getElseRule() {
		return (tElse != null) ? tElse : (tElse = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Else"));
	} 

	//terminal RANGE:
	//
	//	"range" | "RANGE" | "Range";
	public TerminalRule getRANGERule() {
		return (tRANGE != null) ? tRANGE : (tRANGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RANGE"));
	} 

	//terminal MIN:
	//
	//	"min" | "MIN";
	public TerminalRule getMINRule() {
		return (tMIN != null) ? tMIN : (tMIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MIN"));
	} 

	//terminal MAX:
	//
	//	"max" | "MAX";
	public TerminalRule getMAXRule() {
		return (tMAX != null) ? tMAX : (tMAX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAX"));
	} 

	//terminal MOD:
	//
	//	"mod" | "MOD";
	public TerminalRule getMODRule() {
		return (tMOD != null) ? tMOD : (tMOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MOD"));
	} 

	//terminal INTFUNC:
	//
	//	"int" | "INT";
	public TerminalRule getINTFUNCRule() {
		return (tINTFUNC != null) ? tINTFUNC : (tINTFUNC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTFUNC"));
	} 

	//terminal ABS:
	//
	//	"abs" | "ABS";
	public TerminalRule getABSRule() {
		return (tABS != null) ? tABS : (tABS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ABS"));
	} 

	//terminal POW:
	//
	//	"pow" | "POW";
	public TerminalRule getPOWRule() {
		return (tPOW != null) ? tPOW : (tPOW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POW"));
	} 

	//terminal LOG:
	//
	//	"log" | "LOG" | "log10" | "LOG10";
	public TerminalRule getLOGRule() {
		return (tLOG != null) ? tLOG : (tLOG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOG"));
	} 

	//terminal FLOAT:
	//
	//	INT "." INT* | "." INT+;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal AND:
	//
	//	".and." | ".AND.";
	public TerminalRule getANDRule() {
		return (tAND != null) ? tAND : (tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND"));
	} 

	//terminal OR:
	//
	//	".or." | ".OR.";
	public TerminalRule getORRule() {
		return (tOR != null) ? tOR : (tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR"));
	} 

	//terminal NOT:
	//
	//	".not." | ".NOT.";
	public TerminalRule getNOTRule() {
		return (tNOT != null) ? tNOT : (tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT"));
	} 

	//terminal ALWAYS:
	//
	//	"always";
	public TerminalRule getALWAYSRule() {
		return (tALWAYS != null) ? tALWAYS : (tALWAYS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALWAYS"));
	} 

	//terminal ORDER:
	//
	//	"order";
	public TerminalRule getORDERRule() {
		return (tORDER != null) ? tORDER : (tORDER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ORDER"));
	} 

	//terminal STRING:
	//
	//	"\'" !("\'" | "\n" | "\r")* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal SL_COMMENT:
	//
	//	"!" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ID:
	//
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
