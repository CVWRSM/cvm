import java.util.jar.JarFile

plugins{
    id 'library.deps-conventions'
    id 'library.java-conventions'

    // The following plugin is used to build the OSGI bundle
    id 'biz.aQute.bnd.builder' version '6.4.0'
}

jar {
    archiveBaseName.set('third-party')
    archiveVersion.set('1.0.0.0')
    archiveFileName.set("${archiveBaseName.get()}_${archiveVersion.get()}.jar")
}


dependencies {
    implementation libs.commons.io
    implementation libs.jfreechart
    implementation libs.osgi.core
    implementation libs.osgi.compendium

    implementation fileTree(dir: 'libs/x64', include: ['*.jar'])
    implementation fileTree(dir: 'libs/x64', include: ['*.dll'])
    implementation fileTree(dir: 'libs/sys', include: ['*.jar'])

    //    implementation libs.hec.monolith
    //    implementation libs.hec.nucleus.metadata
}

configurations.configureEach {
    exclude group: "javax.media", module: "jai_core"
    exclude group: "javax.media", module: "jai_codec"
    exclude group: "com.sun.media", module: "jai_imageio"
}

tasks.register('copyDependencies', Copy) {
    from(configurations.runtimeClasspath)
    into 'build/tmp/libs'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar.dependsOn(copyDependencies)

tasks.register('prepareBndFile') {
    def bndFile = file('bnd.bnd')
    def bndTemplateFile = file('bnd.bnd.template')
    def libsDir = file('build/tmp/libs')
    def packageSet = new LinkedHashSet<String>()
    def includeResourceSet = new LinkedHashSet<String>()

    doLast {
        println "Running prepareBndFile task..."

        // Delete bnd.bnd if it exists
        if (bndFile.exists()) {
            bndFile.delete()
            println "Deleted existing bnd.bnd file."
        }

        // Copy bnd.bnd.template to bnd.bnd
        bndFile.text = bndTemplateFile.text
        println "Copied bnd.bnd.template to bnd.bnd."

        // Collect package names from JAR files
        libsDir.eachFileRecurse { file ->
            if (file.name.endsWith('.jar')) {
                includeResourceSet.add("lib_x64/${file.name}=${file.path.replace('\\', '/')}")
                JarFile jar = new JarFile(file)
                jar.entries().each { entry ->
                    if (entry.name.endsWith('.class')) {
                        def packageName = entry.name.replaceAll('/[^/]+$', '').replace('/', '.')
                        if (!packageName.startsWith('Lib.')) {
                            packageSet.add(packageName)
                        }
                    }
                }
            }
        }

        // Add Export-Package contents to the end of bnd.bnd
        def exportContents = packageSet.collect { it + ',\\' }.join('\n    ')
        bndFile.append("\nExport-Package: \\\n    ${exportContents}\n")
        println "Added Export-Package contents to bnd.bnd."
    }
}

jar.dependsOn(prepareBndFile)
