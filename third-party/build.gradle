import java.util.jar.JarFile

plugins{
    id 'library.deps-conventions'
    id 'library.java-conventions'

    // The following plugin is used to build the OSGI bundle
    id 'biz.aQute.bnd.builder' version '6.4.0'
}

jar {
    archiveBaseName.set('third-party')
    archiveVersion.set('1.0.0.0')
    archiveFileName.set("${archiveBaseName.get()}_${archiveVersion.get()}.jar")
}


dependencies {
    api libs.commons.io
    api libs.jfreechart
    api libs.osgi.core
    api libs.osgi.compendium
    
    //x64 jars
//    api(":calsim")
    api(":calsimgui")
    api(":coinor")
    api(":collections")
    api(":com.google.ortools.linearsolver")
    api(":COM")
    api(":dsm2-input-model")
    api(":gurobi")
    api(":iText")
    api(":jarh5obj")
    api(":jarhdf5-2.11.0")
    api(":jarhdfobj")
    api(":jnios")
    api(":jpy")
    api(":jpython")
    api(":lpsolve55j")
    api(":misc-1.1")
    api(":objenesis-1.2")
    api(":parser")
    api(":slf4j-nop-1.7.5")
    api(":sqljdbc4-2.0")
    api(":swixml")
    api(":vista")
    api(":XAOptimizer")
    api(":xml")

    //dlls
    api fileTree(dir: '../libs/x64', include: ['cb.dll'])
    api fileTree(dir: '../libs/x64', include: ['jep.dll'])

    //sys jars
    api(":codebase")
    api(":jai_codec")
    api(":jai_core")
    api(":jai_imageio")
    api(":jdom")
    api(":jh")
    api(":jxl")
    api(":jython")
}

configurations.configureEach {
    exclude group: "javax.media", module: "jai_core"
    exclude group: "javax.media", module: "jai_codec"
    exclude group: "com.sun.media", module: "jai_imageio"
}

tasks.register('copyDependencies', Copy) {
    from(configurations.runtimeClasspath)
    into 'build/tmp/libs'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar.dependsOn(copyDependencies)

tasks.register('prepareBndFile') {
    def bndFile = file('bnd.bnd')
    def bndTemplateFile = file('bnd.bnd.template')
    def libsDir = file('build/tmp/libs')
    def packageSet = new LinkedHashSet<String>()
    def includeResourceSet = new LinkedHashSet<String>()

    doFirst {
        println "Running prepareBndFile task..."

        // Delete bnd.bnd if it exists
        if (bndFile.exists()) {
            bndFile.delete()
            println "Deleted existing bnd.bnd file."
        }

        // print the full path to the bndFile
        println "bndFile: ${bndFile}"

        // Copy bnd.bnd.template to bnd.bnd
        bndFile.text = bndTemplateFile.text
        println "Copied bnd.bnd.template to bnd.bnd."

        // Collect package names from JAR files
        libsDir.eachFileRecurse { file ->
            if (file.name.endsWith('.jar')) {
                includeResourceSet.add("lib_x64/${file.name}=${file.path.replace('\\', '/')}")
                JarFile jar = new JarFile(file)
                jar.entries().each { entry ->
                    if (entry.name.endsWith('.class')) {
                        def packageName = entry.name.replaceAll('/[^/]+$', '').replace('/', '.')
                        if (!packageName.startsWith('Lib.')) {
                            packageSet.add(packageName)
                        }
                    }
                }
            }
        }

        // Add Export-Package contents to the end of bnd.bnd
        def exportContents = packageSet.collect { it + ',\\' }.join('\n    ')
        bndFile.append("\nExport-Package: \\\n    ${exportContents}\n")
        println "Added Export-Package contents to bnd.bnd."
    }
}

jar.dependsOn(prepareBndFile)

task findConflictingJars {
    doLast {
        def jarFiles = fileTree(dir: '../libs', include: '**/*.jar')
        def conflictingJars = []

        jarFiles.each { jarFile ->
            def jar = new java.util.jar.JarFile(jarFile)
            def entries = jar.entries()
            while (entries.hasMoreElements()) {
                def entry = entries.nextElement()
                println "JAR files containing the 'com/sun/java/util/collections' package:"
                if (entry.name.startsWith('hec/data')) {
                    conflictingJars << jarFile
                    break
                }
            }
        }

        if (conflictingJars) {
            println "JAR files containing the 'com/sun/java/util/collections' package:"
            conflictingJars.each { println it }
        } else {
            println "No conflicting JAR files found."
        }
    }
}

task printHecDataJars {
    doLast {
        def jarFiles = configurations.runtimeClasspath.files.findAll { it.name.endsWith('.jar') }
        def hecDataJars = []

        jarFiles.each { jarFile ->
            def jar = new java.util.jar.JarFile(jarFile)
            def entries = jar.entries()
            while (entries.hasMoreElements()) {
                def entry = entries.nextElement()
                if (entry.name.startsWith('hec/data')) {
                    hecDataJars << jarFile
                    break
                }
            }
        }

        if (hecDataJars) {
            println "JAR files containing the 'hec.data' package:"
            hecDataJars.each { println it }
        } else {
            println "No JAR files containing the 'hec.data' package found."
        }
    }
}