plugins{
    id 'library.deps-conventions'
    id 'library.java-conventions'
    id 'maven-publish'
    id 'distribution'
}
configurations{
    windows_x64
    testProjects
    regressionTest
}
repositories{
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/rmanet/cvwrsm")
    }
}

dependencies {
    implementation(project(":wrims-core")){
        exclude group: "org.testng"
    }
    //junit 5
    regressionTest libs.bundles.junit5
    windows_x64 'mil.army.usace.hec:javaHeclib:7-IQ-0-win-x86_64@zip'
    windows_x64 "gov.ca.dwr:run-libs:+"
    testProjects "gov.ca.dwr:watershed01:0.1.1"
}

tasks.register("testExecute", JavaExec) {
    def compareDirName = "$buildDir/testProjects/CalLite4.1_TF"
    dependsOn(tasks.named("getNatives"))
    dependsOn(tasks.named("getTestProjects"))
    workingDir "${buildDir}/testProjects/"
    classpath = files("${compareDirName}/Run/external")
    classpath += sourceSets.main.runtimeClasspath
    mainClass = "wrimsv2.components.ControllerBatch"
    args "-config=$buildDir/testProjects/CalLite4.1_TF/Test_01.config"

    environment 'PATH', "${compareDirName}/Run/external;$buildDir/lib;${System.getenv('PATH')}"
    systemProperty "java.library.path", "${compareDirName}/Run/external;$buildDir/lib"

    jvmArgs "-Xmx4096m", "-Xss1024K", "-XX:+CreateMinidumpOnCrash"
}
tasks.register('getNatives', Sync) { syncTask ->
    doFirst{
        mkdir "$buildDir/lib"
    }
    syncTask.from configurations.windows_x64.collect { zipTree(it) }
    syncTask.into file("$buildDir/lib")
}

tasks.register('getTestProjects', Sync) { syncTask ->
    doFirst{
        mkdir "$buildDir/testProjects"
    }
    syncTask.from configurations.testProjects.collect { zipTree(it) }
    syncTask.into file("$buildDir/testProjects")
}

tasks.register('zip', Zip) {
    from project.findProperty('sourceDir') ?: 'none'
    archiveFileName = project.findProperty('zipName') ?: 'Watershed'
}

publishing {
    publications {
        study (MavenPublication) {
            groupId 'gov.ca.dwr' // Replace with your group ID
            artifactId project.findProperty('zipName') ?: 'Watershed'
            version = project.findProperty('postVersion') ?: "1.0.0"

            artifact zip
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/rmanet/cvwrsm")
            credentials {
                username = project.findProperty('dwr-gpr.user') ?: "error"
                password = project.findProperty('dwr-gpr.key') ?: "error"
            }
        }
    }
}