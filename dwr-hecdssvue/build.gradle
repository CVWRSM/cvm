plugins{
    id 'library.deps-conventions'
    id 'library.java-conventions'

    // The following plugin is used to build the OSGI bundle
    id 'biz.aQute.bnd.builder' version '6.4.0'
}

jar {
    archiveBaseName.set('dwr-hecdssvue')
    archiveVersion.set('1.0.0.0')
    archiveFileName.set("${archiveBaseName.get()}_${archiveVersion.get()}.jar")
}

configurations {
    eclipseLibs
    implementation.extendsFrom(eclipseLibs)
}

dependencies {
    //additional dependencies
    implementation libs.hec.monolith
    implementation libs.hec.nucleus.metadata
    implementation libs.dssgui

    //module dependencies
    implementation project(':third-party')
    implementation project(':wrims-ide')

    //eclipse libs
    implementation fileTree(dir: '../eclipse-luna-libs', include: ['*.jar'])

    //add test dependency on junit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testRuntimeOnly fileTree(dir: '../eclipse-luna-libs', include: ['*.jar'])
}

configurations.configureEach {
    exclude group: "javax.media", module: "jai_core"
    exclude group: "javax.media", module: "jai_codec"
    exclude group: "com.sun.media", module: "jai_imageio"
}

test {
    useJUnitPlatform()
    include '**/OSGiModuleTest.class'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

task findJarsWithPackage {
    doLast {
        def packagePath = 'org/eclipse/core/runtime'
        def eclipseLibsDir = file('../eclipse-luna-libs')
        def jarsWithPackage = []

        eclipseLibsDir.eachFileRecurse { file ->
            if (file.name.endsWith('.jar')) {
                def zipFile = new java.util.zip.ZipFile(file)
                def entries = zipFile.entries()
                while (entries.hasMoreElements()) {
                    def entry = entries.nextElement()
                    if (entry.name.startsWith(packagePath)) {
                        jarsWithPackage << file
                        break
                    }
                }
                zipFile.close()
            }
        }

        println "JARs containing the package org.eclipse.core.runtime:"
        jarsWithPackage.each { jar ->
            println jar
        }
    }
}

task printTestClasspath {
    doLast {
        println "Test runtime classpath:"
        sourceSets.test.runtimeClasspath.each { file ->
            println file
        }
    }
}