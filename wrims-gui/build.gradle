plugins {
    id 'library.deps-conventions'
    id 'library.java-conventions'
    id "de.undercouch.download" version "5.6.0"
}

def wrimsGuiFolder = "wrims2_gui_x64_${version}"
def wrimsGuiDownload = "${buildDir}/download/wrims2_gui_download.zip"

//download the latest WRIMS GUI installer from DWR
tasks.register('downloadWrimsGuiInstaller', Download) {
    src 'https://data.cnra.ca.gov/dataset/0f6b03b4-7de8-4579-8aa0-60f73d9d21fb/resource/89f60e4a-c0c2-4ca2-acac-beb6bdb5d69e/download/wrims2_gui_x64_20240129.zip'
    dest new File(wrimsGuiDownload)
    onlyIfModified true
}

// Task to download and unzip the ZIP file
tasks.register('unzipWrimsGuiTemplate', Copy) {
    dependsOn downloadWrimsGuiInstaller
    from(zipTree(new File(wrimsGuiDownload)))
    into("${buildDir}/building")
}

// Task to find and rename the first subdirectory
tasks.register('renameFirstSubdirectory') {
    dependsOn unzipWrimsGuiTemplate
    doLast {
        def unzippedDir = file("${buildDir}/building")
        def subDirs = unzippedDir.listFiles().findAll { it.isDirectory() }
        if (subDirs.size() == 1) {
            def oldDir = subDirs[0]
            def newDir = new File(unzippedDir, wrimsGuiFolder)
            if (oldDir.renameTo(newDir)) {
                println "Renamed ${oldDir.name} to ${wrimsGuiFolder}"
            } else {
                throw new GradleException("Failed to rename ${oldDir.name} to ${wrimsGuiFolder}")
            }
        } else {
            throw new GradleException("Expected exactly one subdirectory but found ${subDirs.size()}")
        }
    }
}

// Task that removes jars containing "hecdssvue", "jdiagram", or "wrimsv2" from the ${buildDir}/${wrimsGuiFolder}/dropins folder
tasks.register('removeJarsFromDropins', Delete) {
    dependsOn renameFirstSubdirectory
    delete fileTree(dir: "${buildDir}/building/${wrimsGuiFolder}/dropins", include: ['*hecdssvue*.jar', '*jdiagram*.jar', '*wrimsv2*.jar', '*xtext*.jar'])
}

// Task that clears the workspace cache
tasks.register('removeWorkspaceCache', Delete) {
    dependsOn removeJarsFromDropins
    delete fileTree(dir: "${buildDir}/building/${wrimsGuiFolder}/workspace", include: ['*'])
}

// Task to copy JARs to dropins folder
tasks.register('copyJarsToDropins', Copy) {
    dependsOn removeWorkspaceCache
    from(project(':third-party').tasks.named('jar').get().archiveFile)
    from(project(':wrims-ide').tasks.named('jar').get().archiveFile)
    from(project(':dwr-hecdssvue').tasks.named('jar').get().archiveFile)
    from(project(':jdiagram').tasks.named('jar').get().archiveFile)
    from(project(':xtext-editor').tasks.named('jar').get().archiveFile)
    from(project(':xtext-editor-ui').tasks.named('jar').get().archiveFile)
    into("${buildDir}/building/${wrimsGuiFolder}/dropins")
}

//task that copies the src/main/configuration/simpleconfigurator/bundles.info file into
// build/wrims_gui_x64_${version}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info
tasks.register('copyBundlesInfo', Copy) {
    dependsOn copyJarsToDropins
    from("src/main/configuration/simpleconfigurator/bundles.info")
    into("${buildDir}/building/${wrimsGuiFolder}/configuration/org.eclipse.equinox.simpleconfigurator")
}

// Task that zips the wrims_gui_x64_${version} folder into a zip file
tasks.register('zipWrimsGui', Zip) {
    dependsOn copyBundlesInfo
    from("${buildDir}/building/${wrimsGuiFolder}")
    archiveFileName = "${wrimsGuiFolder}.zip"
    destinationDirectory = file("${buildDir}/installer")
}
