plugins {
    id 'library.deps-conventions'
    id 'library.java-conventions'
    id "de.undercouch.download" version "5.6.0"
}

configurations{
    windows_x64
}

dependencies {
    windows_x64 "gov.ca.dwr:run-libs:+"
}

def date = new Date()
def formattedDate = date.format('yyyyMMdd')

def wrimsGuiFolder = "wrims2_gui_x64_${formattedDate}"
def wrimsGuiDownload = "${buildDir}/download/wrims2_gui_download.zip"

//download the latest WRIMS GUI installer from DWR
tasks.register('downloadWrimsGuiInstaller', Download) {
    src 'https://data.cnra.ca.gov/dataset/0f6b03b4-7de8-4579-8aa0-60f73d9d21fb/resource/89f60e4a-c0c2-4ca2-acac-beb6bdb5d69e/download/wrims2_gui_x64_20240129.zip'
    dest new File(wrimsGuiDownload)
    onlyIfModified true
}

// Task to download and unzip the ZIP file
tasks.register('unzipWrimsGuiTemplate', Copy) {
    dependsOn downloadWrimsGuiInstaller
    from(zipTree(new File(wrimsGuiDownload)))
    into("${buildDir}/installer")
}

// Task to find and rename the first subdirectory
tasks.register('renameFirstSubdirectory') {
    dependsOn unzipWrimsGuiTemplate
    doLast {
        def unzippedDir = file("${buildDir}/installer")
        def subDirs = unzippedDir.listFiles().findAll { it.isDirectory() }
        if (subDirs.size() == 1) {
            def oldDir = subDirs[0]
            def newDir = new File(unzippedDir, wrimsGuiFolder)
            if (oldDir.renameTo(newDir)) {
                println "Renamed ${oldDir.name} to ${wrimsGuiFolder}"
            } else {
                throw new GradleException("Failed to rename ${oldDir.name} to ${wrimsGuiFolder}")
            }
        } else {
            throw new GradleException("Expected exactly one subdirectory but found ${subDirs.size()}")
        }
    }
}

// Remove the dropins folder
tasks.register('removeDropinsFolder', Delete) {
    dependsOn renameFirstSubdirectory
    delete "${buildDir}/installer/${wrimsGuiFolder}/dropins"
}

// Task that clears the workspace cache
tasks.register('removeWorkspaceCache', Delete) {
    dependsOn removeDropinsFolder
    delete "${buildDir}/installer/${wrimsGuiFolder}/workspace/.metadata"
}

// Task to copy JARs to dropins folder
tasks.register('copyJarsToDropins', Copy) {
    dependsOn removeWorkspaceCache
    from(project(':third-party').tasks.named('jar').get().archiveFile)
    from(project(':wrims-ide').tasks.named('jar').get().archiveFile)
    from(project(':dwr-hecdssvue').tasks.named('jar').get().archiveFile)
    from(project(':jdiagram').tasks.named('jar').get().archiveFile)
    from(project(':xtext-editor').tasks.named('jar').get().archiveFile)
    from(project(':xtext-editor-ui').tasks.named('jar').get().archiveFile)
    into("${buildDir}/installer/${wrimsGuiFolder}/dropins")
}

//task to delete all contents of the ${buildDir}/installer/${wrimsGuiFolder}/libs folder
tasks.register('cleanLibFolder', Delete) {
    dependsOn copyJarsToDropins
    delete "${buildDir}/installer/${wrimsGuiFolder}/lib"
}

//task to download native libraries (dlls)
tasks.register('getNatives', Sync) { syncTask ->
    dependsOn cleanLibFolder
    syncTask.from configurations.windows_x64.collect { zipTree(it) }
    syncTask.into file("${buildDir}/installer/${wrimsGuiFolder}/lib")
}

// Task to copy JARs to dropins folder
tasks.register('copyWrimsCoreToLib', Copy) {
    dependsOn getNatives
    from(project(':wrims-core').tasks.named('jar').get().archiveFile)
    into("${buildDir}/installer/${wrimsGuiFolder}/lib")
}

//task to unzip the contents of the third-party jar into a temp folder
tasks.register('unzipThirdPartyJar', Copy) {
    dependsOn copyWrimsCoreToLib
    from(zipTree(project(':third-party').tasks.named('jar').get().archiveFile))
    into("${buildDir}/third-party")
}

//task to copy all files from ${buildDir}/third-party/lib_x64 to ${buildDir}/installer/${wrimsGuiFolder}/lib
tasks.register('copyThirdPartyToLib', Copy) {
    dependsOn unzipThirdPartyJar
    from("${buildDir}/third-party/lib_x64")
    from("${buildDir}/third-party/heclib")
    into("${buildDir}/installer/${wrimsGuiFolder}/lib")
}

//task that copies the src/main/configuration/simpleconfigurator/bundles.info file into
//bundles.info file contains the file mappings for the dropins jars.
tasks.register('copyBundlesInfo', Copy) {
    dependsOn copyThirdPartyToLib
    from("src/main/configuration/simpleconfigurator/bundles.info")
    into("${buildDir}/installer/${wrimsGuiFolder}/configuration/org.eclipse.equinox.simpleconfigurator")
    filter { line ->
        line.replace('${WRIMS_VERSION}', version)
    }
}

/**
 * Running the WRIMS2_GUI_Start.bat file will launch the WRIMS exe with a -clean argument that
 * forces an update of some ecplise files and ensures the user can then run the WRIMS GUI
 * with the updated packages using the WRIMS2GUI_x64.exe file going forward.
 */
tasks.register('runWrimsGui') {
    dependsOn copyBundlesInfo
    doLast {
        def processBuilder = new ProcessBuilder('cmd', '/c', 'WRIMS2_GUI_Start.bat')
        processBuilder.directory(new File("${buildDir}/installer/${wrimsGuiFolder}"))
        def process = processBuilder.start()
        Thread.sleep(60000)
        def taskkill = new ProcessBuilder('cmd', '/c', 'taskkill', '/IM', 'WRIMS2_GUI_x64.exe', '/F').start()
    }
}

// Task that zips the wrims_gui_x64_${version} folder into a zip file
tasks.register('zipWrimsGui', Zip) {
    dependsOn runWrimsGui
    from("${buildDir}/installer/${wrimsGuiFolder}")
    archiveFileName = "${wrimsGuiFolder}.zip"
    destinationDirectory = file("${buildDir}/installer")
}
